command: docker compose
short: Docker Compose
long: 使用 Docker 定义并运行多容器应用
usage: docker compose
pname: docker
plink: docker.yaml
cname:
    - docker compose attach
    - docker compose bridge
    - docker compose build
    - docker compose commit
    - docker compose config
    - docker compose cp
    - docker compose create
    - docker compose down
    - docker compose events
    - docker compose exec
    - docker compose export
    - docker compose images
    - docker compose kill
    - docker compose logs
    - docker compose ls
    - docker compose pause
    - docker compose port
    - docker compose ps
    - docker compose publish
    - docker compose pull
    - docker compose push
    - docker compose restart
    - docker compose rm
    - docker compose run
    - docker compose scale
    - docker compose start
    - docker compose stats
    - docker compose stop
    - docker compose top
    - docker compose unpause
    - docker compose up
    - docker compose version
    - docker compose volumes
    - docker compose wait
    - docker compose watch
clink:
    - docker_compose_attach.yaml
    - docker_compose_bridge.yaml
    - docker_compose_build.yaml
    - docker_compose_commit.yaml
    - docker_compose_config.yaml
    - docker_compose_cp.yaml
    - docker_compose_create.yaml
    - docker_compose_down.yaml
    - docker_compose_events.yaml
    - docker_compose_exec.yaml
    - docker_compose_export.yaml
    - docker_compose_images.yaml
    - docker_compose_kill.yaml
    - docker_compose_logs.yaml
    - docker_compose_ls.yaml
    - docker_compose_pause.yaml
    - docker_compose_port.yaml
    - docker_compose_ps.yaml
    - docker_compose_publish.yaml
    - docker_compose_pull.yaml
    - docker_compose_push.yaml
    - docker_compose_restart.yaml
    - docker_compose_rm.yaml
    - docker_compose_run.yaml
    - docker_compose_scale.yaml
    - docker_compose_start.yaml
    - docker_compose_stats.yaml
    - docker_compose_stop.yaml
    - docker_compose_top.yaml
    - docker_compose_unpause.yaml
    - docker_compose_up.yaml
    - docker_compose_version.yaml
    - docker_compose_volumes.yaml
    - docker_compose_wait.yaml
    - docker_compose_watch.yaml
options:
    - option: all-resources
      value_type: bool
      default_value: "false"
      description: 包含所有资源（即使未被任何服务使用）
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: ansi
      value_type: string
      default_value: auto
      description: |
        控制何时输出 ANSI 控制字符（"never"|"always"|"auto"）
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: compatibility
      value_type: bool
      default_value: "false"
      description: 以向后兼容模式运行 Compose
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: dry-run
      value_type: bool
      default_value: "false"
      description: 以 Dry Run 模式执行命令（仅演示将要执行的步骤，不更改状态）
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: env-file
      value_type: stringArray
      default_value: '[]'
      description: 指定备用的环境变量文件
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: file
      shorthand: f
      value_type: stringArray
      default_value: '[]'
      description: 指定一个或多个 Compose 配置文件
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: no-ansi
      value_type: bool
      default_value: "false"
      description: 不输出 ANSI 控制字符（已弃用）
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: parallel
      value_type: int
      default_value: "-1"
      description: 控制最大并行度，-1 表示不限制
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: profile
      value_type: stringArray
      default_value: '[]'
      description: 指定要启用的配置文件（profile）
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: progress
      value_type: string
      description: 设置进度输出类型（auto、tty、plain、json、quiet）
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: project-directory
      value_type: string
      description: |-
        指定备用工作目录
        （默认：第一个被指定的 Compose 文件所在路径）
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: project-name
      shorthand: p
      value_type: string
      description: 项目名称
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: verbose
      value_type: bool
      default_value: "false"
      description: 显示更详细的输出
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: version
      shorthand: v
      value_type: bool
      default_value: "false"
      description: 显示 Docker Compose 的版本信息
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: workdir
      value_type: string
      description: |-
        已弃用！请改用 --project-directory。
        指定备用工作目录
        （默认：第一个被指定的 Compose 文件所在路径）
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
examples: |-
    ### 使用 `-f` 指定一个或多个 Compose 文件的名称与路径
    使用 `-f` 标志指定 Compose [配置文件](/reference/compose-file/) 的位置。

    #### 同时指定多个 Compose 文件
    你可以提供多个 `-f` 配置文件。提供多个文件时，Compose 会将它们合并为一个配置。
    合并顺序与命令行中提供文件的顺序一致；后面的文件会覆盖并补充前面的配置。

    例如，考虑如下命令：

    ```console
    $ docker compose -f compose.yaml -f compose.admin.yaml run backup_db
    ```

    `compose.yaml` 可能定义了一个名为 `webapp` 的服务。

    ```yaml
    services:
      webapp:
        image: examples/web
        ports:
          - "8000:8000"
        volumes:
          - "/data"
    ```
    如果 `compose.admin.yaml` 也定义了同名服务，则相同的字段会覆盖前一个文件；
    新增的字段会被添加到 `webapp` 服务配置中。

    ```yaml
    services:
      webapp:
        build: .
        environment:
          - DEBUG=1
    ```

    当你使用多个 Compose 文件时，文件中的所有相对路径都以第一个通过 `-f` 指定的配置文件所在目录为基准。
    你可以通过 `--project-directory` 选项覆盖该基准路径。

    将 `-f` 的文件名指定为 `-`（短横线）可以从标准输入（stdin）读取配置；当使用 stdin 时，
    配置中的所有相对路径都以当前工作目录为基准。

    `-f` 标志是可选的。如果未在命令行提供该标志，Compose 会在当前工作目录及其父目录中查找
    `compose.yaml` 或 `docker-compose.yaml` 文件。

    #### 指定单个 Compose 文件的路径
    你可以使用 `-f` 指定一个不在当前目录下的 Compose 文件路径，既可以在命令行直接指定，
    也可以在 shell 或环境文件中设置 `COMPOSE_FILE` 环境变量。

    例如，假设你正在运行 Compose 的 Rails 示例，并且在 `sandbox/rails` 目录下有一个 `compose.yaml` 文件。
    你可以在任意位置使用如下命令，通过 `-f` 拉取该示例中 db 服务所需的 postgres 镜像：

    ```console
    $ docker compose -f ~/sandbox/rails/compose.yaml pull db
    ```

    ### 使用 `-p` 指定项目名

    每个配置都有一个项目名。Compose 按如下优先级设置项目名：
    - 命令行标志 `-p`
    - 环境变量 `COMPOSE_PROJECT_NAME`
    - 配置文件顶层的 `name:`（或通过 `-f` 指定的多个配置文件中最后一个文件里的 `name:`）
    - 包含配置文件的项目目录的 `basename`（或通过 `-f` 指定的第一个配置文件所在目录的 `basename`）
    - 如果未指定配置文件，则使用当前目录的 `basename`
    项目名只能包含小写字母、数字、短横线和下划线，并且必须以小写字母或数字开头。
    如果项目目录或当前目录的 `basename` 不满足该约束，你必须改用上述其他方式之一设置项目名。

    ```console
    $ docker compose -p my_project ps -a
    NAME                 SERVICE    STATUS     PORTS
    my_project_demo_1    demo       running

    $ docker compose -p my_project logs
    demo_1  | PING localhost (127.0.0.1): 56 data bytes
    demo_1  | 64 bytes from 127.0.0.1: seq=0 ttl=64 time=0.095 ms
    ```

    ### 使用 profiles 启用可选服务

    使用 `--profile` 指定一个或多个要启用的 profile。
    运行 `docker compose --profile frontend up` 会启动带有 `frontend` profile 的服务，
    同时也会启动未指定任何 profile 的服务。
    你也可以启用多个 profile，例如 `docker compose --profile frontend --profile debug up` 会同时启用 `frontend` 和 `debug` 两个 profile。

    也可以通过环境变量 `COMPOSE_PROFILES` 设置 profiles。

    ### 配置并行度

    使用 `--parallel` 指定对引擎并发调用时的最大并行度。
    运行 `docker compose --parallel 1 pull` 会逐个拉取 Compose 文件中可拉取的镜像。
    该选项也可用于控制构建时的并发度。

    也可以通过环境变量 `COMPOSE_PARALLEL_LIMIT` 设置并行度。

    ### 设置环境变量

    你可以通过环境变量为多种 docker compose 选项提供值，包括 `-f`、`-p` 与 `--profiles` 等。

    设置环境变量 `COMPOSE_FILE` 等价于传入 `-f`；
    `COMPOSE_PROJECT_NAME` 等价于 `-p`；
    `COMPOSE_PROFILES` 等价于 `--profiles`；
    `COMPOSE_PARALLEL_LIMIT` 等价于 `--parallel`。

    如果在命令行显式传入了标志，与之对应的环境变量会被忽略。

    将环境变量 `COMPOSE_IGNORE_ORPHANS` 设为 `true` 可以阻止 docker compose 为项目检测孤立容器。

    将环境变量 `COMPOSE_MENU` 设为 `false` 可以在以附加模式运行 `docker compose up` 时禁用辅助菜单。
    或者你也可以运行 `docker compose up --menu=false` 来禁用该菜单。

    ### 使用 Dry Run 模式测试命令

    使用 `--dry-run` 可以在不改变应用栈状态的情况下测试命令。
    Dry Run 模式会显示 Compose 执行命令时将要采取的所有步骤，例如：
    ```console
    $ docker compose --dry-run up --build -d
    [+] Pulling 1/1
     ✔ DRY-RUN MODE -  db Pulled                                                                                                                                                                                                               0.9s
    [+] Running 10/8
     ✔ DRY-RUN MODE -    build service backend                                                                                                                                                                                                 0.0s
     ✔ DRY-RUN MODE -  ==> ==> writing image dryRun-754a08ddf8bcb1cf22f310f09206dd783d42f7dd                                                                                                                                                   0.0s
     ✔ DRY-RUN MODE -  ==> ==> naming to nginx-golang-mysql-backend                                                                                                                                                                            0.0s
     ✔ DRY-RUN MODE -  Network nginx-golang-mysql_default                                    Created                                                                                                                                           0.0s
     ✔ DRY-RUN MODE -  Container nginx-golang-mysql-db-1                                     Created                                                                                                                                           0.0s
     ✔ DRY-RUN MODE -  Container nginx-golang-mysql-backend-1                                Created                                                                                                                                           0.0s
     ✔ DRY-RUN MODE -  Container nginx-golang-mysql-proxy-1                                  Created                                                                                                                                           0.0s
     ✔ DRY-RUN MODE -  Container nginx-golang-mysql-db-1                                     Healthy                                                                                                                                           0.5s
     ✔ DRY-RUN MODE -  Container nginx-golang-mysql-backend-1                                Started                                                                                                                                           0.0s
     ✔ DRY-RUN MODE -  Container nginx-golang-mysql-proxy-1                                  Started                                     Started
    ```
    从上述示例可以看到，第一步是拉取由 `db` 服务定义的镜像，然后构建 `backend` 服务。
    接着创建容器。`db` 服务启动后，`backend` 与 `proxy` 会在 `db` 服务变为健康状态后再启动。

    Dry Run 模式几乎适用于所有命令。但对于不会改变 Compose 栈状态的命令（如 `ps`、`ls`、`logs`），无法使用 Dry Run 模式。
deprecated: false
hidden: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

