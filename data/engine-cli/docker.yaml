command: docker
short: Docker CLI 的基础命令。
long: |-
    根据你的 Docker 系统配置，你可能需要在每条 `docker` 命令前加上 `sudo`。
    为了避免每次都使用 `sudo`，系统管理员可以创建一个名为 `docker` 的 Unix 组，
    并将相关用户加入该组。

    如需了解 Docker 的安装或 `sudo` 配置，请参阅对应操作系统的
    [安装指南](/install/)。

    ### 显示帮助

    查看任意命令的帮助，只需在命令后添加 `--help` 选项。

    ```console
    $ docker run --help

    用法: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

    基于镜像创建并运行一个新的容器

    选项:
          --add-host value             添加自定义主机到 IP 映射（host:ip）（默认 []）
      -a, --attach value               附加到 STDIN、STDOUT 或 STDERR（默认 []）
    <...>
    ```

    ### 环境变量

    `docker` 命令行支持以下环境变量：

    | 变量                          | 说明                                                                                                                                                                                                                                                             |
    | :---------------------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
    | `DOCKER_API_VERSION`          | 覆盖协商出的 API 版本，用于调试（例如 `1.19`）                                                                                                                                                                                                                     |
    | `DOCKER_CERT_PATH`            | 认证密钥的位置。该变量同时被 `docker` CLI 和 [`dockerd` 守护进程](/reference/cli/dockerd/) 使用。                                                                                                                                                                   |
    | `DOCKER_CONFIG`               | 客户端配置文件的位置。                                                                                                                                                                                                                                            |
    | `DOCKER_CONTENT_TRUST_SERVER` | 要使用的 Notary 服务器 URL。默认与仓库的 URL 相同。                                                                                                                                                                                                                |
    | `DOCKER_CONTENT_TRUST`        | 设置后，Docker 使用 Notary 对镜像进行签名与校验。等价于在 build、create、pull、push、run 中使用 `--disable-content-trust=false`。                                                                                                                                    |
    | `DOCKER_CONTEXT`              | 要使用的 `docker context` 名称（会覆盖 `DOCKER_HOST` 环境变量以及通过 `docker context use` 设置的默认上下文）。                                                                                                                                                     |
    | `DOCKER_CUSTOM_HEADERS`       | （实验性）配置客户端发送的[自定义 HTTP 头](#custom-http-headers)。以逗号分隔的 `name=value` 列表形式提供。等价于配置文件中的 `HttpHeaders` 字段。                                                                                                                 |
    | `DOCKER_DEFAULT_PLATFORM`     | 为支持 `--platform` 标志的命令设置默认平台。                                                                                                                                                                                                                      |
    | `DOCKER_HIDE_LEGACY_COMMANDS` | 设置后，Docker 会在 `docker help` 输出中隐藏“旧版”顶级命令（例如 `docker rm`、`docker pull`），仅显示按对象类型划分的“管理命令”（如 `docker container`）。未来版本可能会将其设为默认行为。                                                                       |
    | `DOCKER_HOST`                 | 要连接的守护进程套接字。                                                                                                                                                                                                                                          |
    | `DOCKER_TLS`                  | 为 `docker` CLI 发起的连接启用 TLS（等价于 `--tls` 命令行选项）。设置为非空值即启用。注意：若设置了其他 TLS 相关选项，则会自动启用 TLS。                                                                                                                             |
    | `DOCKER_TLS_VERIFY`           | 设置后，Docker 使用 TLS 并校验远端。该变量同时被 `docker` CLI 和 [`dockerd` 守护进程](/reference/cli/dockerd/) 使用。                                                                                                                                                |
    | `BUILDKIT_PROGRESS`           | 使用 [BuildKit 后端](/build/buildkit/) 进行[构建](/reference/cli/docker/image/build/)时设置进度输出类型（`auto`、`plain`、`tty`、`rawjson`）。使用 `plain` 可显示容器输出（默认 `auto`）。                                                                |

    由于 Docker 使用 Go 编写，你也可以使用 Go 运行时支持的环境变量。常见如下：

    | 变量          | 说明                                                                 |
    |:--------------|:--------------------------------------------------------------------|
    | `HTTP_PROXY`  | 用于 HTTP 请求的代理 URL（除非被 `NO_PROXY` 覆盖）。                |
    | `HTTPS_PROXY` | 用于 HTTPS 请求的代理 URL（除非被 `NO_PROXY` 覆盖）。               |
    | `NO_PROXY`    | 以逗号分隔的主机列表，这些主机不通过代理。                          |

    详见 [Go 规范](https://pkg.go.dev/golang.org/x/net/http/httpproxy#Config)。

    ### 选项类型

    单字符命令行选项可以合并使用。与其输入 `docker run -i -t --name test busybox sh`，
    你可以写成 `docker run -it --name test busybox sh`。

    #### 布尔值

    布尔选项的形式为 `-d=false`。帮助文本中显示的值是默认值，
    如果你未显式指定该标志，将使用默认值。若仅指定布尔标志而不带值，
    则其值会被设置为 `true`，与默认值无关。

    例如，执行 `docker run -d` 会将该值设为 `true`，容器将以“分离”模式在后台运行。

    对于默认值为 `true` 的选项（如 `docker build --rm=true`），
    只能通过显式设置为 `false` 来关闭：

    ```console
    $ docker build --rm=false .
    ```

    #### 多值

    你可以在同一条命令中多次指定类似 `-a=[]` 的选项，例如：

    ```console
    $ docker run -a stdin -a stdout -i -t ubuntu /bin/bash

    $ docker run -a stdin -a stdout -a stderr ubuntu /bin/ls
    ```

    有时，多次使用的选项会需要更复杂的值字符串，例如 `-v`：

    ```console
    $ docker run -v /host:/container example/mysql
    ```

    > [!NOTE]
    > 由于 `pty` 实现的限制，请勿同时使用 `-t` 和 `-a stderr` 选项。
    > 在 `pty` 模式下，所有 `stderr` 实际都会输出到 `stdout`。

    #### 字符串与整数

    类似 `--name=""` 的选项接受字符串，并且只能指定一次。
    类似 `-c=0` 的选项接受整数，并且也只能指定一次。

    ### 配置文件

    默认情况下，Docker 命令行会把其配置文件保存在 `$HOME` 目录下名为 `.docker` 的目录中。

    该配置目录中的大多数文件由 Docker 自行管理，不应手动修改。
    但你可以编辑 `config.json`，以控制 `docker` 命令的部分行为。

    你可以通过环境变量或命令行选项调整 `docker` 命令的行为；
    也可以在 `config.json` 中配置部分相同的行为。
    如果同时设置了环境变量与 `--config` 标志，则命令行标志优先生效；
    命令行选项会覆盖环境变量，而环境变量会覆盖 `config.json` 中的配置。

    #### 更改 `.docker` 目录

    如需指定不同的配置目录，可使用 `DOCKER_CONFIG` 环境变量，或传入 `--config` 命令行选项。
    若两者同时指定，则以 `--config` 的值为准。以下示例通过位于 `~/testconfigs/` 的
    `config.json` 来覆盖 `docker ps` 命令：

    ```console
    $ docker --config ~/testconfigs/ ps
    ```

    此标志仅对当前执行的命令生效。若需持久化配置，可在 shell（例如 `~/.profile` 或 `~/.bashrc`）中
    设置 `DOCKER_CONFIG` 环境变量。下面示例将新目录设置为 `HOME/newdir/.docker`：

    ```console
    $ echo export DOCKER_CONFIG=$HOME/newdir/.docker > ~/.profile
    ```

    ### Docker CLI 配置文件（`config.json`）属性

    <a name="configjson-properties"><!-- included for deep-links to old section --></a>

    使用 Docker CLI 配置来自定义 `docker` CLI 的行为。
    配置文件使用 JSON 格式，属性说明如下：

    默认情况下，配置文件位于 `~/.docker/config.json`。
    如需更改位置，参见[更改 `.docker` 目录](#change-the-docker-directory)。

    > [!WARNING]
    > `~/.docker` 配置目录内的配置文件及其他文件可能包含敏感信息，
    > 例如代理认证信息，或（取决于所用的凭证存储）镜像仓库的凭证。
    > 在与他人共享前请检查配置文件内容，并避免将其提交到版本控制。

    #### 自定义命令的默认输出格式

    当未提供 `--format` 标志时，可通过以下字段为部分命令自定义默认输出格式。

    | 属性                    | 说明                                                                                                                                                                                      |
    | :--------------------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
    | `configFormat`         | 自定义 `docker config ls` 的默认输出格式。参见 [`docker config ls`](/reference/cli/docker/config/ls/#format) 获取支持的格式化指令列表。                   |
    | `imagesFormat`         | 自定义 `docker images`/`docker image ls` 的默认输出格式。参见 [`docker images`](/reference/cli/docker/image/ls/#format) 获取支持的格式化指令列表。      |
    | `networksFormat`       | 自定义 `docker network ls` 的默认输出格式。参见 [`docker network ls`](/reference/cli/docker/network/ls/#format) 获取支持的格式化指令列表。                |
    | `nodesFormat`          | 自定义 `docker node ls` 的默认输出格式。参见 [`docker node ls`](/reference/cli/docker/node/ls/#format) 获取支持的格式化指令列表。                         |
    | `pluginsFormat`        | 自定义 `docker plugin ls` 的默认输出格式。参见 [`docker plugin ls`](/reference/cli/docker/plugin/ls/#format) 获取支持的格式化指令列表。                   |
    | `psFormat`             | 自定义 `docker ps`/`docker container ps` 的默认输出格式。参见 [`docker ps`](/reference/cli/docker/container/ls/#format) 获取支持的格式化指令列表。      |
    | `secretFormat`         | 自定义 `docker secret ls` 的默认输出格式。参见 [`docker secret ls`](/reference/cli/docker/secret/ls/#format) 获取支持的格式化指令列表。                   |
    | `serviceInspectFormat` | 自定义 `docker service inspect` 的默认输出格式。参见 [`docker service inspect`](/reference/cli/docker/service/inspect/#format) 获取支持的格式化指令列表。 |
    | `servicesFormat`       | 自定义 `docker service ls` 的默认输出格式。参见 [`docker service ls`](/reference/cli/docker/service/ls/#format) 获取支持的格式化指令列表。                |
    | `statsFormat`          | 自定义 `docker stats` 的默认输出格式。参见 [`docker stats`](/reference/cli/docker/container/stats/#format) 获取支持的格式化指令列表。                     |
    | `tasksFormat`          | 自定义 `docker stack ps` 的默认输出格式。参见 [`docker stack ps`](/reference/cli/docker/stack/ps/#format) 获取支持的格式化指令列表。                      |
    | `volumesFormat`        | 自定义 `docker volume ls` 的默认输出格式。参见 [`docker volume ls`](/reference/cli/docker/volume/ls/#format) 获取支持的格式化指令列表。                   |

    #### 自定义 HTTP 头

    `HttpHeaders` 属性用于指定从 Docker 客户端发送到守护进程的所有请求应包含的头。
    Docker 不会解析这些头，也不会允许它们修改 Docker 自行设置的头。

    或者，你也可以使用 `DOCKER_CUSTOM_HEADERS`[环境变量](#environment-variables)
    （自 v27.1 起提供）。该环境变量为实验性功能，其行为可能发生变化。

    #### 凭证存储选项

    `credsStore` 属性指定一个外部二进制程序作为默认的凭证存储。
    当设置该属性后，`docker login` 会尝试将凭证保存到 `$PATH` 中可见的
    `docker-credential-<value>` 可执行文件中。若未设置该属性，凭证将保存在
    CLI 配置文件的 `auths` 字段。详见 [`docker login` 文档中的“凭证存储”](/reference/cli/docker/login/#credential-stores)。

    `credHelpers` 属性为特定仓库指定优先于 `credsStore` 或 `auths` 的凭证助手。
    设置该属性后，在存取某个特定仓库的凭证时，将使用 `docker-credential-<value>`
    二进制程序。详见 [`docker login` 文档中的“凭证助手”](/reference/cli/docker/login/#credential-helpers)。

    #### 容器的代理自动配置

    `proxies` 属性用于为容器自动设置代理相关的环境变量，并在执行 `docker build` 时
    作为 `--build-arg` 传入。你可以配置一个适用于所有连接的 Docker 守护进程的
    `"default"` 代理集合，或为某个具体主机（Docker 守护进程）单独配置，例如
    `https://docker-daemon1.example.com`。每个环境可以设置以下属性：

    | 属性           | 说明                                                                                             |
    |:---------------|:------------------------------------------------------------------------------------------------|
    | `httpProxy`    | 容器中的 `HTTP_PROXY` 与 `http_proxy` 默认值，同时作为 `docker build` 的 `--build-arg`           |
    | `httpsProxy`   | 容器中的 `HTTPS_PROXY` 与 `https_proxy` 默认值，同时作为 `docker build` 的 `--build-arg`          |
    | `ftpProxy`     | 容器中的 `FTP_PROXY` 与 `ftp_proxy` 默认值，同时作为 `docker build` 的 `--build-arg`              |
    | `noProxy`      | 容器中的 `NO_PROXY` 与 `no_proxy` 默认值，同时作为 `docker build` 的 `--build-arg`                |
    | `allProxy`     | 容器中的 `ALL_PROXY` 与 `all_proxy` 默认值，同时作为 `docker build` 的 `--build-arg`              |

    这些设置仅用于配置“容器”的代理，不用于配置 `docker` CLI 或 `dockerd` 守护进程。
    配置 CLI 与守护进程的代理，请参阅[环境变量](#environment-variables)与
    [HTTP/HTTPS 代理](/engine/daemon/proxy/#httphttps-proxy)。

    > [!WARNING]
    > 代理配置可能包含敏感信息（例如代理需要认证时的凭证）。
    > 环境变量会以明文形式存储在容器配置中，因此可能被远程 API 查看，
    > 或在执行 `docker commit` 时被提交进镜像。
    { .warning }

    #### 从容器分离的默认快捷键

    当你已附加到某个容器时，可使用按键序列 `CTRL-p CTRL-q` 从中分离并保持其继续运行。
    你可以通过 `detachKeys` 属性自定义该快捷键。为该属性指定一个 `<sequence>` 值，
    格式为逗号分隔的序列：要么是字母 [a-Z]，要么是 `ctrl-` 与以下任意字符的组合：

    * `a-z`（任意单个小写字母）
    * `@`（at 符号）
    * `[`（左中括号）
    * `\\`（两个反斜杠）
    * `_`（下划线）
    * `^`（插入符号）

    该自定义会应用于通过你的 Docker 客户端启动的所有容器。
    用户可以在每个容器上覆盖你的自定义或默认快捷键：在执行 `docker attach`、
    `docker exec`、`docker run` 或 `docker start` 时使用 `--detach-keys` 标志。

    #### CLI 插件选项

    `plugins` 属性包含 CLI 插件的特定设置。键为插件名，值为该插件的选项映射。

    #### 示例配置文件

    下面是一个 `config.json` 示例，用于展示各字段的格式：

    ```json
    {
      "HttpHeaders": {
        "MyHeader": "MyValue"
      },
      "psFormat": "table {{.ID}}\\t{{.Image}}\\t{{.Command}}\\t{{.Labels}}",
      "imagesFormat": "table {{.ID}}\\t{{.Repository}}\\t{{.Tag}}\\t{{.CreatedAt}}",
      "pluginsFormat": "table {{.ID}}\t{{.Name}}\t{{.Enabled}}",
      "statsFormat": "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}",
      "servicesFormat": "table {{.ID}}\t{{.Name}}\t{{.Mode}}",
      "secretFormat": "table {{.ID}}\t{{.Name}}\t{{.CreatedAt}}\t{{.UpdatedAt}}",
      "configFormat": "table {{.ID}}\t{{.Name}}\t{{.CreatedAt}}\t{{.UpdatedAt}}",
      "serviceInspectFormat": "pretty",
      "nodesFormat": "table {{.ID}}\t{{.Hostname}}\t{{.Availability}}",
      "detachKeys": "ctrl-e,e",
      "credsStore": "secretservice",
      "credHelpers": {
        "awesomereg.example.org": "hip-star",
        "unicorn.example.com": "vcbait"
      },
      "plugins": {
        "plugin1": {
          "option": "value"
        },
        "plugin2": {
          "anotheroption": "anothervalue",
          "athirdoption": "athirdvalue"
        }
      },
      "proxies": {
        "default": {
          "httpProxy":  "http://user:pass@example.com:3128",
          "httpsProxy": "https://my-proxy.example.com:3129",
          "noProxy":    "intra.mycorp.example.com",
          "ftpProxy":   "http://user:pass@example.com:3128",
          "allProxy":   "socks://example.com:1234"
        },
        "https://manager1.mycorp.example.com:2377": {
          "httpProxy":  "http://user:pass@example.com:3128",
          "httpsProxy": "https://my-proxy.example.com:3129"
        }
      }
    }
    ```

    #### 实验性功能

    实验性功能可让你率先体验未来产品能力，主要用于测试与反馈。
    这些功能可能在不同版本之间发生变化，或在未来版本中被移除，恕不另行通知。

    自 Docker 20.10 起，实验性的 CLI 功能默认启用，无需额外配置。

    #### Notary

    如果你使用自建的 Notary 服务器并配合自签名证书或内部 CA，
    需要将证书放置在 Docker 配置目录中的 `tls/<registry_url>/ca.crt`。

    或者，你也可以将证书添加到系统的根证书颁发机构列表中，从而全局信任该证书。
cname:
    - docker attach
    - docker bake
    - docker build
    - docker builder
    - docker checkpoint
    - docker commit
    - docker config
    - docker container
    - docker context
    - docker cp
    - docker create
    - docker diff
    - docker events
    - docker exec
    - docker export
    - docker history
    - docker image
    - docker images
    - docker import
    - docker info
    - docker inspect
    - docker kill
    - docker load
    - docker login
    - docker logout
    - docker logs
    - docker manifest
    - docker network
    - docker node
    - docker pause
    - docker plugin
    - docker port
    - docker ps
    - docker pull
    - docker push
    - docker rename
    - docker restart
    - docker rm
    - docker rmi
    - docker run
    - docker save
    - docker search
    - docker secret
    - docker service
    - docker stack
    - docker start
    - docker stats
    - docker stop
    - docker swarm
    - docker system
    - docker tag
    - docker top
    - docker trust
    - docker unpause
    - docker update
    - docker version
    - docker volume
    - docker wait
clink:
    - docker_attach.yaml
    - docker_bake.yaml
    - docker_build.yaml
    - docker_builder.yaml
    - docker_checkpoint.yaml
    - docker_commit.yaml
    - docker_config.yaml
    - docker_container.yaml
    - docker_context.yaml
    - docker_cp.yaml
    - docker_create.yaml
    - docker_diff.yaml
    - docker_events.yaml
    - docker_exec.yaml
    - docker_export.yaml
    - docker_history.yaml
    - docker_image.yaml
    - docker_images.yaml
    - docker_import.yaml
    - docker_info.yaml
    - docker_inspect.yaml
    - docker_kill.yaml
    - docker_load.yaml
    - docker_login.yaml
    - docker_logout.yaml
    - docker_logs.yaml
    - docker_manifest.yaml
    - docker_network.yaml
    - docker_node.yaml
    - docker_pause.yaml
    - docker_plugin.yaml
    - docker_port.yaml
    - docker_ps.yaml
    - docker_pull.yaml
    - docker_push.yaml
    - docker_rename.yaml
    - docker_restart.yaml
    - docker_rm.yaml
    - docker_rmi.yaml
    - docker_run.yaml
    - docker_save.yaml
    - docker_search.yaml
    - docker_secret.yaml
    - docker_service.yaml
    - docker_stack.yaml
    - docker_start.yaml
    - docker_stats.yaml
    - docker_stop.yaml
    - docker_swarm.yaml
    - docker_system.yaml
    - docker_tag.yaml
    - docker_top.yaml
    - docker_trust.yaml
    - docker_unpause.yaml
    - docker_update.yaml
    - docker_version.yaml
    - docker_volume.yaml
    - docker_wait.yaml
options:
    - option: config
      value_type: string
      default_value: /root/.docker
      description: 客户端配置文件的位置
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: context
      shorthand: c
      value_type: string
      description: |
        连接到守护进程要使用的上下文名称（会覆盖 `DOCKER_HOST` 环境变量以及通过 `docker context use` 设置的默认上下文）
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: debug
      shorthand: D
      value_type: bool
      default_value: "false"
      description: 启用调试模式
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: help
      value_type: bool
      default_value: "false"
      description: 打印用法
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: host
      shorthand: H
      value_type: list
      description: 要连接的守护进程套接字
      details_url: '#host'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: log-level
      shorthand: l
      value_type: string
      default_value: info
      description: 设置日志级别（`debug`、`info`、`warn`、`error`、`fatal`）
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: tls
      value_type: bool
      default_value: "false"
      description: 使用 TLS；被 `--tlsverify` 隐式启用
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: tlscacert
      value_type: string
      default_value: /root/.docker/ca.pem
      description: 仅信任由该 CA 签发的证书
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: tlscert
      value_type: string
      default_value: /root/.docker/cert.pem
      description: TLS 证书文件路径
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: tlskey
      value_type: string
      default_value: /root/.docker/key.pem
      description: TLS 私钥文件路径
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: tlsverify
      value_type: bool
      default_value: "false"
      description: 使用 TLS 并校验远端
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
examples: |-
    ### 指定守护进程主机（-H, --host）{#host}

    你可以使用 `-H`、`--host` 标志指定在执行 `docker` 命令时要使用的套接字。
    支持以下协议：

    | 协议                                    | 说明                       | 示例                              |
    |----------------------------------------|----------------------------|-----------------------------------|
    | `unix://[<path>]`                      | Unix 套接字（仅 Linux）     | `unix:///var/run/docker.sock`     |
    | `tcp://[<IP or host>[:port]]`          | TCP 连接                    | `tcp://174.17.0.1:2376`           |
    | `ssh://[username@]<IP or host>[:port]` | SSH 连接                    | `ssh://user@192.168.64.5`         |
    | `npipe://[<name>]`                     | 命名管道（仅 Windows）      | `npipe:////./pipe/docker_engine`  |

    如果你未指定 `-H`，且未使用自定义
    [context](/engine/context/working-with-contexts)，则命令使用以下默认套接字：

    - 在 macOS 与 Linux 上：`unix:///var/run/docker.sock`
    - 在 Windows 上：`npipe:////./pipe/docker_engine`

    若希望达到类似效果又不想在每条命令上都写 `-H`，可以
    [创建一个 context](/reference/cli/docker/context/create/)，
    或使用 [`DOCKER_HOST` 环境变量](#environment-variables)。

    关于 `-H` 标志的更多信息，参见
    [守护进程套接字选项](/reference/cli/dockerd/#daemon-socket-option)。

    #### 使用 TCP 套接字

    下例展示了如何通过 TCP 调用远程守护进程上的 `docker ps`：
    远程守护进程的 IP 为 `174.17.0.1`，监听端口 `2376`：

    ```console
    $ docker -H tcp://174.17.0.1:2376 ps
    ```

    > [!NOTE]
    > 约定上，Docker 守护进程使用 `2376` 端口进行安全的 TLS 连接，
    > 而 `2375` 端口用于不安全的明文连接（无 TLS）。

    #### 使用 SSH 套接字

    当你通过 SSH 在远程守护进程上执行命令时，请求会被转发到该主机上的
    `/var/run/docker.sock` Unix 套接字。

    ```console
    $ docker -H ssh://user@192.168.64.5 ps
    ```

    你也可以在 SSH 地址末尾追加路径，显式指定套接字位置：

    ```console
    $ docker -H ssh://user@192.168.64.5/var/run/docker.sock ps
    ```
deprecated: false
hidden: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

