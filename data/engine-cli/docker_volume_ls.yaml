command: docker volume ls
aliases: docker volume ls, docker volume list
short: 列出卷
long: |-
    列出 Docker 已知的所有卷。你可以使用 `-f` 或 `--filter` 进行筛选。
    可用筛选项详见 [filtering](#filter) 小节。
usage: docker volume ls [OPTIONS]
pname: docker volume
plink: docker_volume.yaml
options:
    - option: cluster
      value_type: bool
      default_value: "false"
      description: |
        仅显示集群卷，并使用集群卷列表的输出格式
      deprecated: false
      hidden: false
      min_api_version: "1.42"
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: true
    - option: filter
      shorthand: f
      value_type: filter
      description: 提供筛选条件（例如 `dangling=true`）
      details_url: '#filter'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: format
      value_type: string
      description: |-
        使用自定义模板格式化输出：
        'table'：            以表格形式输出，并包含表头（默认）
        'table TEMPLATE'：   使用给定的 Go 模板按表格形式输出
        'json'：             以 JSON 格式输出
        'TEMPLATE'：         使用给定的 Go 模板渲染输出
        关于使用模板格式化输出的更多信息，参见 https://docs.docker.com/go/formatting/
      details_url: '#format'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: quiet
      shorthand: q
      value_type: bool
      default_value: "false"
      description: 仅显示卷名称
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
inherited_options:
    - option: help
      value_type: bool
      default_value: "false"
      description: Print usage
      
      description: 打印用法
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
examples: |-
    ### 创建一个卷

    ```console
    $ docker volume create rosemary

    rosemary

    $ docker volume create tyler

    tyler

    $ docker volume ls

    DRIVER              VOLUME NAME
    local               rosemary
    local               tyler
    ```

    ### 过滤（--filter） {#filter}

    过滤标志（`-f` 或 `--filter`）的格式为 "key=value"。如果需要多个过滤条件，
    则传入多个标志（例如 `--filter "foo=bar" --filter "bif=baz"`）。

    当前支持的过滤器：

    - dangling (Boolean - true or false, 0 or 1)
    - driver (a volume driver's name)
    - label (`label=<key>` or `label=<key>=<value>`)
    - name (a volume's name)

    #### dangling（悬挂）

    `dangling` 过滤器匹配所有未被任何容器引用的卷。

    ```console
    $ docker run -d  -v tyler:/tmpwork  busybox

    f86a7dd02898067079c99ceacd810149060a70528eff3754d0b0f1a93bd0af18
    $ docker volume ls -f dangling=true
    DRIVER              VOLUME NAME
    local               rosemary
    ```

    #### driver（驱动）

    `driver` 过滤器按卷驱动进行匹配。

    例如，以下命令匹配由 `local` 驱动创建的卷：

    ```console
    $ docker volume ls -f driver=local

    DRIVER              VOLUME NAME
    local               rosemary
    local               tyler
    ```

    #### label（标签）

    `label` 过滤器可按仅有 `label`，或 `label` 与其值同时匹配。

    首先创建一些卷用于演示：

    ```console
    $ docker volume create the-doctor --label is-timelord=yes

    the-doctor
    $ docker volume create daleks --label is-timelord=no

    daleks
    ```

    下面的筛选示例会匹配所有带有 `is-timelord` 标签的卷，忽略其值：

    ```console
    $ docker volume ls --filter label=is-timelord

    DRIVER              VOLUME NAME
    local               daleks
    local               the-doctor
    ```

    如上所示，带有 `is-timelord=yes` 与 `is-timelord=no` 的卷都会被返回。

    同时对标签的键与值进行过滤，则会得到期望结果：

    ```console
    $ docker volume ls --filter label=is-timelord=yes

    DRIVER              VOLUME NAME
    local               the-doctor
    ```

    指定多个标签过滤条件时效果为“AND”组合；必须同时满足所有条件：

    ```console
    $ docker volume ls --filter label=is-timelord=yes --filter label=is-timelord=no

    DRIVER              VOLUME NAME
    ```

    #### name（名称）

    `name` 过滤器按卷名的完整或部分匹配。

    例如，下面的过滤会匹配所有名称中包含 `rose` 字符串的卷：

    ```console
    $ docker volume ls -f name=rose

    DRIVER              VOLUME NAME
    local               rosemary
    ```

    ### 格式化输出（--format） {#format}

    使用 `--format` 结合 Go 模板美化输出内容。

    Go 模板可用的占位符如下：

    | Placeholder   | Description                                                                           |
    |---------------|---------------------------------------------------------------------------------------|
    | `.Name`       | 卷名称                                                                                |
    | `.Driver`     | 卷驱动                                                                                |
    | `.Scope`      | 卷作用域（local、global）                                                             |
    | `.Mountpoint` | 该卷在宿主机上的挂载点                                                                |
    | `.Labels`     | 该卷的所有标签                                                                        |
    | `.Label`      | 该卷某个特定标签的值。如 `{{.Label "project.version"}}`                              |

    使用 `--format` 时，`volume ls` 要么按模板声明的内容原样输出，
    要么在使用 `table` 指令时同时输出表头。

    下面示例使用无表头的模板，输出所有卷的 `Name` 与 `Driver`，以冒号（`:`）分隔：

    ```console
    $ docker volume ls --format "{{.Name}}: {{.Driver}}"

    vol1: local
    vol2: local
    vol3: local
    ```

    若要以 JSON 格式列出所有卷，使用 `json` 指令：

    ```console
    $ docker volume ls --format json
    {"Driver":"local","Labels":"","Links":"N/A","Mountpoint":"/var/lib/docker/volumes/docker-cli-dev-cache/_data","Name":"docker-cli-dev-cache","Scope":"local","Size":"N/A"}
    ```
deprecated: false
hidden: false
min_api_version: "1.21"
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

