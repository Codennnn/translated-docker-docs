command: docker volume create
short: 创建一个卷
long: |-
    创建一个新的卷，供容器使用并存储数据。如果未指定名称，
    Docker 会生成一个随机名称。
usage: docker volume create [OPTIONS] [VOLUME]
pname: docker volume
plink: docker_volume.yaml
options:
    - option: availability
      value_type: string
      default_value: active
      description: 集群卷可用性（`active`、`pause`、`drain`）
      deprecated: false
      hidden: false
      min_api_version: "1.42"
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: true
    - option: driver
      shorthand: d
      value_type: string
      default_value: local
      description: 指定卷驱动名称
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: group
      value_type: string
      description: 集群卷所属的组（Cluster Volumes）
      deprecated: false
      hidden: false
      min_api_version: "1.42"
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: true
    - option: label
      value_type: list
      description: 设置卷的元数据
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: limit-bytes
      value_type: bytes
      default_value: "0"
      description: 集群卷的最小大小（字节）
      deprecated: false
      hidden: false
      min_api_version: "1.42"
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: true
    - option: name
      value_type: string
      description: 指定卷名称
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: opt
      shorthand: o
      value_type: map
      default_value: map[]
      description: 设置驱动特定选项
      details_url: '#opt'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: required-bytes
      value_type: bytes
      default_value: "0"
      description: 集群卷的最大大小（字节）
      deprecated: false
      hidden: false
      min_api_version: "1.42"
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: true
    - option: scope
      value_type: string
      default_value: single
      description: 集群卷访问范围（`single`、`multi`）
      deprecated: false
      hidden: false
      min_api_version: "1.42"
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: true
    - option: secret
      value_type: map
      default_value: map[]
      description: 集群卷 secrets
      deprecated: false
      hidden: false
      min_api_version: "1.42"
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: true
    - option: sharing
      value_type: string
      default_value: none
      description: |
        集群卷访问共享（`none`、`readonly`、`onewriter`、`all`）
      deprecated: false
      hidden: false
      min_api_version: "1.42"
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: true
    - option: topology-preferred
      value_type: list
      description: 集群卷的首选拓扑位置
      deprecated: false
      hidden: false
      min_api_version: "1.42"
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: true
    - option: topology-required
      value_type: list
      description: 集群卷必须可访问的拓扑位置
      deprecated: false
      hidden: false
      min_api_version: "1.42"
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: true
    - option: type
      value_type: string
      default_value: block
      description: 集群卷访问类型（`mount`、`block`）
      deprecated: false
      hidden: false
      min_api_version: "1.42"
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: true
inherited_options:
    - option: help
      value_type: bool
      default_value: "false"
      description: Print usage
      
      description: 打印用法
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
examples: |-
    创建一个卷，并配置容器使用它：

    ```console
    $ docker volume create hello

    hello

    $ docker run -d -v hello:/world busybox ls /world
    ```

    该挂载会在容器的 `/world` 目录内创建。Docker 不支持容器内挂载点的相对路径。

    多个容器可以共用同一个卷。当两个容器需要访问共享数据时这很有用，
    例如一个容器写入，另一个容器读取。

    卷名称在所有驱动间必须唯一。也就是说，不能在两个不同驱动上使用相同的卷名。
    尝试创建同名的两个卷会导致错误：

    ```console
    A volume named  "hello"  already exists with the "some-other" driver. Choose a different volume name.
    ```

    如果你在当前驱动上指定了已存在的卷名，Docker 会认为你要复用该卷，且不会报错。

    ### 驱动特定选项（-o, --opt） {#opt}

    某些卷驱动可以通过额外选项来自定义卷的创建。使用 `-o` 或 `--opt`
    将选项传递给驱动：

    ```console
    $ docker volume create --driver fake \
        --opt tardis=blue \
        --opt timey=wimey \
        foo
    ```

    这些选项会被直接传递给卷驱动。不同驱动对选项的支持与行为可能不同
    （甚至可能不生效）。

    内置的 `local` 驱动在 Windows 上不接受任何选项；在 Linux 与 Docker Desktop 上，
    `local` 驱动接受与 Linux `mount` 命令类似的选项。可以多次传入 `--opt` 来提供多个选项。
    部分 `mount` 选项（如 `o`）本身可以接收以逗号分隔的子选项列表。
    可用挂载选项的完整列表见
    [手册页](https://man7.org/linux/man-pages/man8/mount.8.html)。

    例如，下面的命令创建一个名为 `foo` 的 `tmpfs` 卷，大小为 100 MB，
    且 `uid` 为 1000。

    ```console
    $ docker volume create --driver local \
        --opt type=tmpfs \
        --opt device=tmpfs \
        --opt o=size=100m,uid=1000 \
        foo
    ```

    另一个使用 `btrfs` 的示例：

    ```console
    $ docker volume create --driver local \
        --opt type=btrfs \
        --opt device=/dev/sda2 \
        foo
    ```

    再例如，使用 `nfs` 从 `192.168.1.1` 以 `rw` 模式挂载 `/path/to/dir`：

    ```console
    $ docker volume create --driver local \
        --opt type=nfs \
        --opt o=addr=192.168.1.1,rw \
        --opt device=:/path/to/dir \
        foo
    ```
deprecated: false
hidden: false
min_api_version: "1.21"
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

