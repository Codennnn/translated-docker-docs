command: docker container attach
aliases: docker container attach, docker attach
short: |
    将本地标准输入、输出和错误流附加到正在运行的容器
long: |-
    使用 `docker attach`，可通过容器的 ID 或名称，将你终端的标准输入、标准输出和标准错误
    （或三者任意组合）附加到一个正在运行的容器。这样你就可以查看容器的输出，或像在终端
    直接运行命令一样对其进行交互式控制。

    > [!NOTE]
    > `attach` 命令会显示容器中 `ENTRYPOINT` 与 `CMD` 进程的输出。
    > 如果这些进程此时未产生任何输出，`attach` 命令可能会看起来像是“卡住”了。

    你可以在 Docker 主机上的不同会话中，同时多次附加到同一个容器进程。

    要停止容器，请按 `CTRL-c`。该按键序列会向容器发送 `SIGKILL`。
    如果 `--sig-proxy` 为 true（默认值），`CTRL-c` 会向容器发送 `SIGINT`。
    如果容器是使用 `-i` 与 `-t` 运行的，你可以使用按键序列 `CTRL-p CTRL-q`
    从容器分离，同时保持容器继续运行。

    > [!NOTE]
    > 在容器内以 PID 1 运行的进程在 Linux 中会被特殊对待：它会忽略默认
    > 动作为终止的信号。因此，除非程序显式实现了处理逻辑，它不会因
    > 收到 `SIGINT` 或 `SIGTERM` 而退出。

    当附加到启用 TTY 的容器（使用了 `-i` 与 `-t` 选项）时，无法重定向
    `docker attach` 命令的标准输入。

    当客户端通过 `docker attach` 连接到容器的 `stdio` 时，Docker 会使用约 1MB 的
    内存缓冲区以最大化应用吞吐量。一旦缓冲区被填满，API 连接速度会受到影响，从而
    影响输出进程的写入速度。这与 SSH 等应用的行为类似。因此，不建议在较慢的客户端
    连接上以前台方式运行会产生大量输出的性能敏感型应用。访问日志时建议改用
    `docker logs` 命令。
usage: docker container attach [OPTIONS] CONTAINER
pname: docker container
plink: docker_container.yaml
options:
    - option: detach-keys
      value_type: string
      description: Override the key sequence for detaching a container
      
      description: 覆盖用于从容器分离的按键序列
      details_url: '#detach-keys'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: no-stdin
      value_type: bool
      default_value: "false"
      description: Do not attach STDIN
      
      description: 不附加 STDIN
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: sig-proxy
      value_type: bool
      default_value: "true"
      description: Proxy all received signals to the process
      
      description: 将接收到的所有信号代理转发给该进程
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
inherited_options:
    - option: help
      value_type: bool
      default_value: "false"
      description: Print usage
      
      description: 打印用法
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
examples: |-
    ### 附加到正在运行的容器并从中分离

    下面的示例会在分离模式下启动一个运行 `top` 的 Alpine 容器，
    随后再附加到该容器；

    ```console
    $ docker run -d --name topdemo alpine top -b

    $ docker attach topdemo

    Mem: 2395856K used, 5638884K free, 2328K shrd, 61904K buff, 1524264K cached
    CPU:   0% usr   0% sys   0% nic  99% idle   0% io   0% irq   0% sirq
    Load average: 0.15 0.06 0.01 1/567 6
      PID  PPID USER     STAT   VSZ %VSZ CPU %CPU COMMAND
        1     0 root     R     1700   0%   3   0% top -b
    ```

    由于容器启动时未使用 `-i` 与 `-t` 选项，信号会被转发到已附加的进程。
    这意味着默认的 `CTRL-p CTRL-q` 分离按键序列不会生效，而按下 `CTRL-c`
    会终止容器：

    ```console
    <...>
      PID  PPID USER     STAT   VSZ %VSZ CPU %CPU COMMAND
        1     0 root     R     1700   0%   7   0% top -b
    ^P^Q
    ^C

    $ docker ps -a --filter name=topdemo

    CONTAINER ID   IMAGE     COMMAND    CREATED          STATUS                       PORTS     NAMES
    96254a235bd6   alpine    "top -b"   44 seconds ago   Exited (130) 8 seconds ago             topdemo
    ```

    重复上述示例，但这次启用 `-i` 与 `-t` 选项；

    ```console
    $ docker run -dit --name topdemo2 alpine /usr/bin/top -b
    ```

    现在在附加到容器后，按下 `CTRL-p CTRL-q`（“read escape sequence”），Docker CLI 会处理
    分离序列，`attach` 命令会从容器分离。使用 `docker ps` 检查容器状态可见容器仍在后台运行：

    ```console
    $ docker attach topdemo2

    Mem: 2405344K used, 5629396K free, 2512K shrd, 65100K buff, 1524952K cached
    CPU:   0% usr   0% sys   0% nic  99% idle   0% io   0% irq   0% sirq
    Load average: 0.12 0.12 0.05 1/594 6
      PID  PPID USER     STAT   VSZ %VSZ CPU %CPU COMMAND
        1     0 root     R     1700   0%   3   0% top -b
    read escape sequence

    $ docker ps -a --filter name=topdemo2

    CONTAINER ID   IMAGE     COMMAND    CREATED          STATUS          PORTS     NAMES
    fde88b83c2c2   alpine    "top -b"   22 seconds ago   Up 21 seconds             topdemo2
    ```

    ### 获取容器中命令的退出码

    在第二个示例中可以看到，`bash` 进程返回的退出码也会由 `docker attach`
    命令返回给其调用者：

    ```console
    $ docker run --name test -dit alpine
    275c44472aebd77c926d4527885bb09f2f6db21d878c75f0a1c212c03d3bcfab

    $ docker attach test
    /# exit 13

    $ echo $?
    13

    $ docker ps -a --filter name=test

    CONTAINER ID   IMAGE     COMMAND     CREATED              STATUS                       PORTS     NAMES
    a2fe3fd886db   alpine    "/bin/sh"   About a minute ago   Exited (13) 40 seconds ago             test
    ```

    ### 覆盖分离按键序列（--detach-keys） {#detach-keys}

    使用 `--detach-keys` 选项可覆盖 Docker 的默认分离按键序列。
    当 Docker 的默认按键与其它应用使用的按键冲突时，这将非常有用。
    你可以通过两种方式定义自定义的分离按键：对单个容器进行覆盖，
    或在全局配置中设置默认值。

    要为某个容器单独覆盖，使用 `docker attach` 命令并加上
    `--detach-keys="<sequence>"` 标志。`<sequence>` 的格式可以是一个字母 [a-Z]，
    或 `ctrl-` 加上下列任意一个：

    * `a-z`（单个小写字母）
    * `@`（at 符号）
    * `[`（左方括号）
    * `\\`（两个反斜杠）
    * `_`（下划线）
    * `^`（脱字符）

    例如，`a`、`ctrl-a`、`X` 或 `ctrl-\\` 都是有效的按键序列示例。要为所有容器
    配置不同的默认分离按键序列，请参阅 [**Configuration file** 部分](/reference/cli/docker/#configuration-files)。
deprecated: false
hidden: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

