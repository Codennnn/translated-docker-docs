command: docker version
short: 显示 Docker 版本信息
long: |-
    `version` 命令会打印所有独立版本化的 Docker 组件的当前版本号。
    使用 [`--format`](#format) 选项可自定义输出。

    `docker version` 会输出 Docker 各组件的版本号；而 `--version`
    （`docker --version`）则输出当前使用的 Docker CLI 版本号。

    ### 默认输出

    默认输出将所有版本信息分为两个部分：
    `Client` 部分包含关于 Docker CLI 与客户端组件的信息；
    `Server` 部分包含关于 Docker Engine 及其所用组件的信息，
    例如 containerd 与 runc 等 OCI 运行时。

    显示的信息可能因安装方式与所用组件不同而异。
    以下示例展示了在 macOS 上运行 Docker Desktop 的输出：

    ```console
    $ docker version

    Client: Docker Engine - Community
     Version:           23.0.3
     API version:       1.42
     Go version:        go1.19.7
     Git commit:        3e7cbfd
     Built:             Tue Apr  4 22:05:41 2023
     OS/Arch:           darwin/amd64
     Context:           default

    Server: Docker Desktop 4.19.0 (12345)
     Engine:
      Version:          23.0.3
      API version:      1.42 (minimum version 1.12)
      Go version:       go1.19.7
      Git commit:       59118bf
      Built:            Tue Apr  4 22:05:41 2023
      OS/Arch:          linux/amd64
      Experimental:     false
     containerd:
      Version:          1.6.20
      GitCommit:        2806fc1057397dbaeefbea0e4e17bddfbd388f38
     runc:
      Version:          1.1.5
      GitCommit:        v1.1.5-0-gf19387a
     docker-init:
      Version:          0.19.0
      GitCommit:        de40ad0
    ```

    ### 客户端与服务端版本

    Docker 采用客户端/服务端架构。你可以在本机使用 Docker CLI 控制远程主机上的 Docker Engine，
    例如云主机或虚拟机中的实例。

    下面示例将 Docker CLI 切换到名为 `remote-test-server` 的 [context](/reference/cli/docker/context/)，
    它在一台 Linux 服务器上运行较旧版本的 Docker Engine：

    ```console
    $ docker context use remote-test-server
    remote-test-server

    $ docker version

    Client: Docker Engine - Community
     Version:           23.0.3
     API version:       1.40 (downgraded from 1.42)
     Go version:        go1.19.7
     Git commit:        3e7cbfd
     Built:             Tue Apr  4 22:05:41 2023
     OS/Arch:           darwin/amd64
     Context:           remote-test-server

    Server: Docker Engine - Community
     Engine:
      Version:          19.03.8
      API version:      1.40 (minimum version 1.12)
      Go version:       go1.12.17
      Git commit:       afacb8b
      Built:            Wed Mar 11 01:29:16 2020
      OS/Arch:          linux/amd64
     containerd:
      Version:          v1.2.13
      GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429
     runc:
      Version:          1.0.0-rc10
      GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd
     docker-init:
      Version:          0.18.0
      GitCommit:        fec3683
    ```

    ### API 版本与版本协商

    客户端使用的 API 版本取决于所连接的 Docker Engine。
    当 CLI 连接到 Docker Engine 时，双方会进行 API 版本协商，并选择两者共同支持的最高版本。

    例如，当 CLI 连接到 Docker Engine 19.03 时，API 版本会降级到 1.40。
    支持的 API 版本参见 [API 版本矩阵](/reference/api/engine/#api-version-matrix)。

    ```console
    $ docker version --format '{{.Client.APIVersion}}'

    1.40
    ```

    需要注意，也可以通过环境变量 `DOCKER_API_VERSION` 覆盖 API 版本，这在调试时很有用，
    同时会禁用 API 版本协商。下面示例展示了设置该环境变量时的行为；
    取消设置该变量后，将移除覆盖并重新启用版本协商：

    ```console
    $ env | grep DOCKER_API_VERSION
    DOCKER_API_VERSION=1.39

    $ docker version --format '{{.Client.APIVersion}}'
    1.39

    $ unset DOCKER_API_VERSION
    $ docker version --format '{{.Client.APIVersion}}'
    1.42
    ```
usage: docker version [OPTIONS]
pname: docker
plink: docker.yaml
options:
    - option: format
      shorthand: f
      value_type: string
      description: |-
        使用自定义模板格式化输出：
        'json'：             以 JSON 格式输出
        'TEMPLATE'：         使用给定的 Go 模板渲染输出
        使用模板格式化输出的更多信息，参阅 https://docs.docker.com/go/formatting/
      details_url: '#format'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
inherited_options:
    - option: help
      value_type: bool
      default_value: "false"
      description: 打印用法
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
examples: |-
    ### 格式化输出（--format） {#format}

    `--format` 选项使用 Go 模板对输出进行美化，这让你可以自定义输出格式，
    或从输出中提取特定信息。详见[格式化命令与日志输出](/config/formatting/)。

    ### 获取服务端版本

    ```console
    $ docker version --format '{{.Server.Version}}'

    23.0.3
    ```

    ### 获取客户端 API 版本

    下例打印客户端正在使用的 API 版本：

    ```console
    $ docker version --format '{{.Client.APIVersion}}'

    1.42
    ```

    上述显示的是客户端与 Docker Engine 协商得到的 API 版本。
    更多信息参见上文的[API 版本与版本协商](#api-version-and-version-negotiation)。

    ### 导出原始 JSON 数据

    ```console
    $ docker version --format '{{json .}}'

    {"Client":"Version":"23.0.3","ApiVersion":"1.42", ...}
    ```
deprecated: false
hidden: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

