command: docker buildx bake
aliases: docker buildx bake, docker buildx f
short: 从文件构建
long: |-
    Bake 是一个高层构建命令。每个指定的目标都会作为构建的一部分并行执行。

    参见《[使用 Bake 的高阶构建选项](/build/bake/)》指南，了解如何编写 Bake 文件。

    > [!NOTE]
    > 如有需要，`buildx bake` 命令未来可能引入向后不兼容的功能变更。
    > 我们期待你的反馈，以进一步改进该命令并扩展其功能。
usage: docker buildx bake [OPTIONS] [TARGET...]
pname: docker buildx
plink: docker_buildx.yaml
options:
    - option: allow
      value_type: stringArray
      default_value: '[]'
      description: 允许构建访问指定资源
      details_url: '#allow'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: call
      value_type: string
      default_value: build
      description: 设置评估构建的方法（`check`、`outline`、`targets`）
      details_url: '#call'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: check
      value_type: bool
      description: 等价于 `--call=check` 的简写
      details_url: '#check'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: file
      shorthand: f
      value_type: stringArray
      default_value: '[]'
      description: 构建定义文件
      details_url: '#file'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: list
      value_type: string
      description: 列出目标或变量
      details_url: '#list'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: list-targets
      value_type: bool
      default_value: "false"
      description: 列出可用的目标
      deprecated: true
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: list-variables
      value_type: bool
      default_value: "false"
      description: 列出已定义的变量
      deprecated: true
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: load
      value_type: bool
      default_value: "false"
      description: 等价于 `--set=*.output=type=docker` 的简写（有条件）
      details_url: '#load'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: metadata-file
      value_type: string
      description: 将构建结果元数据写入文件
      details_url: '#metadata-file'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: no-cache
      value_type: bool
      default_value: "false"
      description: 构建镜像时不使用缓存
      details_url: '#no-cache'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: print
      value_type: bool
      default_value: "false"
      description: 仅打印构建选项而不执行构建
      details_url: '#print'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: progress
      value_type: string
      default_value: auto
      description: |
        设置进度输出类型（`auto`、`none`、`plain`、`quiet`、`rawjson`、`tty`）。使用 plain 以显示容器输出
      details_url: '#progress'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: provenance
      value_type: string
      description: 等价于 `--set=*.attest=type=provenance` 的简写
      details_url: '#provenance'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: pull
      value_type: bool
      default_value: "false"
      description: 始终尝试拉取所有引用的镜像
      details_url: '#pull'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: push
      value_type: bool
      default_value: "false"
      description: 等价于 `--set=*.output=type=registry` 的简写（有条件）
      details_url: '#push'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: sbom
      value_type: string
      description: 等价于 `--set=*.attest=type=sbom` 的简写
      details_url: '#sbom'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: set
      value_type: stringArray
      default_value: '[]'
      description: 覆盖目标的值（例如：`targetpattern.key=value`）
      details_url: '#set'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
inherited_options:
    - option: builder
      value_type: string
      description: 覆盖已配置的构建器实例
      details_url: '#builder'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: debug
      shorthand: D
      value_type: bool
      default_value: "false"
      description: 启用调试日志
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
examples: |-
    ### 允许额外的特权授权（--allow） {#allow}

    ```text
    --allow=ENTITLEMENT[=VALUE]
    ```

    授权（Entitlements）旨在为特权操作提供可控的访问。默认情况下，Buildx 与 BuildKit 以受限权限运行，
    以保护用户及其系统免受意外副作用或安全风险。`--allow` 标志会显式授予额外授权，使当构建或 bake 操作
    需要提升权限时更加清晰可见。

    除 BuildKit 的 `network.host` 与 `security.insecure` 授权外
    （参见 [`docker buildx build --allow`](/reference/cli/docker/buildx/build/#allow)），
    Bake 支持对文件系统的授权，从而对文件系统访问进行更精细的控制。
    这在需要访问默认工作目录之外文件的构建场景中特别有用。

    Bake 支持以下文件系统授权：

    - `--allow fs=<path|*>` - 授予对工作目录之外文件的读写权限。
    - `--allow fs.read=<path|*>` - 授予对工作目录之外文件的读权限。
    - `--allow fs.write=<path|*>` - 授予对工作目录之外文件的写权限。

    `fs` 授权接受一个目录路径（相对或绝对）。或者，你也可以传入通配符（`*`）以允许 Bake 访问整个文件系统。

    ### 示例：fs.read

    在以下 Bake 配置中，Bake 需要访问相对于 Bake 文件的父目录。

    ```hcl
    target "app" {
      context = "../src"
    }
    ```

    假设在与 `docker-bake.hcl` 文件相同的目录中执行 `docker buildx bake app`，
    则需要显式允许 Bake 读取 `../src` 目录。在此情况下，以下命令均可：

    ```console
    $ docker buildx bake --allow fs.read=* app
    $ docker buildx bake --allow fs.read=../src app
    $ docker buildx bake --allow fs=* app
    ```

    ### 示例：fs.write

    以下 `docker-bake.hcl` 文件需要对 `/tmp` 目录的写权限。

    ```hcl
    target "app" {
      output = "/tmp"
    }
    ```

    假设在 `/tmp` 目录之外执行 `docker buildx bake app`，
    则需要允许 `fs.write` 授权，可以通过指定路径或使用通配符：

    ```console
    $ docker buildx bake --allow fs=/tmp app
    $ docker buildx bake --allow fs.write=/tmp app
    $ docker buildx bake --allow fs.write=* app
    ```

    ### 覆盖已配置的构建器实例（--builder） {#builder}

    同 [`buildx --builder`](/reference/cli/docker/buildx/#builder)。

    ### 调用前端方法（--call） {#call}

    同 [`build --call`](/reference/cli/docker/buildx/build/#call)。

    #### Call: check（--check） {#check}

    同 [`build --check`](/reference/cli/docker/buildx/build/#check)。

    ### 指定构建定义文件（-f, --file） {#file}

    使用 `-f` / `--file` 指定要使用的构建定义文件。该文件可以是 HCL、JSON 或 Compose 文件。
    如果指定了多个文件，它们将被读取并合并。

    也可以使用环境变量 `BUILDX_BAKE_FILE` 指定要使用的构建定义。
    该变量与 `-f` / `--file` 互斥；如果同时指定，则环境变量会被忽略。
    可以通过系统路径分隔符分隔多个定义（Windows 通常为 `;`，其他系统通常为 `:`），
    也可以通过 `BUILDX_BAKE_PATH_SEPARATOR` 修改分隔符。

    你可以通过传入目标名称，仅构建特定目标。如下示例构建 `docker-bake.dev.hcl` 中定义的
    `db` 与 `webapp-release` 目标：

    ```hcl
    # docker-bake.dev.hcl
    group "default" {
      targets = ["db", "webapp-dev"]
    }

    target "webapp-dev" {
      dockerfile = "Dockerfile.webapp"
      tags = ["docker.io/username/webapp"]
    }

    target "webapp-release" {
      inherits = ["webapp-dev"]
      platforms = ["linux/amd64", "linux/arm64"]
    }

    target "db" {
      dockerfile = "Dockerfile.db"
      tags = ["docker.io/username/db"]
    }
    ```

    ```console
    $ docker buildx bake -f docker-bake.dev.hcl db webapp-release
    ```

    更多详情参见 [Bake 文件参考](/build/bake/reference/)。

    ### 列出目标与变量（--list） {#list}

    `--list` 会显示 Bake 配置中所有可用的目标或变量，以及其描述（如果在 Bake 文件中通过 `description` 设置）。

    列出所有目标：

    ```console {title="列出目标"}
    $ docker buildx bake --list=targets
    TARGET              DESCRIPTION
    binaries
    default             binaries
    update-docs
    validate
    validate-golangci   Validate .golangci.yml schema (does not run Go linter)
    ```

    列出变量：

    ```console
    $ docker buildx bake --list=variables
    VARIABLE      TYPE      VALUE                DESCRIPTION
    REGISTRY      string    docker.io/username   Registry and namespace
    IMAGE_NAME    string    my-app               Image name
    GO_VERSION              <null>
    DEBUG         bool      false                Add debug symbols
    ```

    变量类型会在使用 `type` 属性进行设置时显示。

    默认情况下，`docker buildx bake --list` 的输出以表格形式展示。也可以使用长形式 CSV 语法并指定
    `format` 属性，将输出以 JSON 形式呈现：

    ```console
    $ docker buildx bake --list=type=targets,format=json
    ```

    ### 将镜像加载到 Docker（--load） {#load}

    `--load` 是添加 `docker` 类型镜像导出的便捷简写：

    ```console
    --load   ≈   --set=*.output=type=docker
    ```

    其行为具有条件：

    - 如果构建定义未设置任何输出，`--load` 会添加 `type=docker`。
    - 如果构建定义的输出为 `docker`、`image`、`registry`、`oci`，且尚未存在 `type=docker` 导出，`--load`
      会添加一个 `type=docker` 导出。
    - 如果构建定义包含 `local` 或 `tar` 输出，`--load` 不会生效，也不会覆盖这些输出。

    示例 bake 文件：

    ```hcl
    target "default" {
      output = ["type=tar,dest=hi.tar"]
    }
    ```

    使用 `--load`：

    ```console
    $ docker buildx bake --load --print
    ...
    "output": [
      {
        "dest": "hi.tar"
        "type": "tar",
       }
    ]
    ```

    `tar` 输出保持不变。

    ### 将构建结果元数据写入文件（--metadata-file） {#metadata-file}

    类似于 [`buildx build --metadata-file`](/reference/cli/docker/buildx/build/#metadata-file)，但会为每个目标
    写入一份结果映射，例如：

    ```hcl
    # docker-bake.hcl
    group "default" {
      targets = ["db", "webapp-dev"]
    }

    target "db" {
      dockerfile = "Dockerfile.db"
      tags = ["docker.io/username/db"]
    }

    target "webapp-dev" {
      dockerfile = "Dockerfile.webapp"
      tags = ["docker.io/username/webapp"]
    }
    ```

    ```console
    $ docker buildx bake --load --metadata-file metadata.json .
    $ cat metadata.json
    ```

    ```json
    {
      "buildx.build.warnings": {},
      "db": {
        "buildx.build.provenance": {},
        "buildx.build.ref": "mybuilder/mybuilder0/0fjb6ubs52xx3vygf6fgdl611",
        "containerimage.config.digest": "sha256:2937f66a9722f7f4a2df583de2f8cb97fc9196059a410e7f00072fc918930e66",
        "containerimage.descriptor": {
          "annotations": {
            "config.digest": "sha256:2937f66a9722f7f4a2df583de2f8cb97fc9196059a410e7f00072fc918930e66",
            "org.opencontainers.image.created": "2022-02-08T21:28:03Z"
          },
          "digest": "sha256:19ffeab6f8bc9293ac2c3fdf94ebe28396254c993aea0b5a542cfb02e0883fa3",
          "mediaType": "application/vnd.oci.image.manifest.v1+json",
          "size": 506
        },
        "containerimage.digest": "sha256:19ffeab6f8bc9293ac2c3fdf94ebe28396254c993aea0b5a542cfb02e0883fa3"
      },
      "webapp-dev": {
        "buildx.build.provenance": {},
        "buildx.build.ref": "mybuilder/mybuilder0/kamngmcgyzebqxwu98b4lfv3n",
        "containerimage.config.digest": "sha256:9651cc2b3c508f697c9c43b67b64c8359c2865c019e680aac1c11f4b875b67e0",
        "containerimage.descriptor": {
          "annotations": {
            "config.digest": "sha256:9651cc2b3c508f697c9c43b67b64c8359c2865c019e680aac1c11f4b875b67e0",
            "org.opencontainers.image.created": "2022-02-08T21:28:15Z"
          },
          "digest": "sha256:6d9ac9237a84afe1516540f40a0fafdc86859b2141954b4d643af7066d598b74",
          "mediaType": "application/vnd.oci.image.manifest.v1+json",
          "size": 506
        },
        "containerimage.digest": "sha256:6d9ac9237a84afe1516540f40a0fafdc86859b2141954b4d643af7066d598b74"
      }
    }
    ```

    > [!NOTE]
    > 构建记录中的 [provenance](/build/metadata/attestations/slsa-provenance/#provenance-attestation-example)
    >（`buildx.build.provenance`）默认仅包含最小溯源。可通过环境变量 `BUILDX_METADATA_PROVENANCE` 自定义：
    > * `min`：最小溯源（默认）。
    > * `max`：完整溯源。
    > * `disabled`、`false` 或 `0`：不设置溯源。

    > [!NOTE]
    > 构建警告（`buildx.build.warnings`）默认不包含。将环境变量 `BUILDX_METADATA_WARNINGS` 设为 `1` 或 `true` 可包含。

    ### 构建镜像时不使用缓存（--no-cache） {#no-cache}

    等同于 `build --no-cache`。构建镜像时不使用缓存。

    ### 仅打印选项而不执行构建（--print） {#print}

    以 JSON 格式打印目标的最终构建选项，而不启动构建。

    ```console
    $ docker buildx bake -f docker-bake.hcl --print db
    {
      "group": {
        "default": {
          "targets": [
            "db"
          ]
        }
      },
      "target": {
        "db": {
          "context": "./",
          "dockerfile": "Dockerfile",
          "tags": [
            "docker.io/tiborvass/db"
          ]
        }
      }
    }
    ```

    ### 设置进度输出类型（--progress） {#progress}

    同 [`build --progress`](/reference/cli/docker/buildx/build/#progress)。

    ### 生成溯源证明（--provenance） {#provenance}

    同 [`build --provenance`](/reference/cli/docker/buildx/build/#provenance)。

    ### 始终尝试拉取更新的镜像（--pull） {#pull}

    等同于 `build --pull`。

    ### 将镜像推送到仓库（--push） {#push}

    `--push` 遵循与 `--load` 相同的逻辑：

    - 若未定义任何输出，则添加 `type=image,push=true` 导出。
    - 对已存在的 `image` 输出，设置 `push=true`。
    - 若输出为 `local` 或 `tar`，则不会覆盖。

    ### 生成 SBOM 证明（--sbom） {#sbom}

    同 [`build --sbom`](/reference/cli/docker/buildx/build/#sbom)。

    ### 从命令行覆盖目标配置（--set） {#set}

    ```
    --set targetpattern.key[.subkey]=value
    ```

    从命令行覆盖目标配置。匹配语法见 https://golang.org/pkg/path/#Match。

    ```console
    $ docker buildx bake --set target.args.mybuildarg=value
    $ docker buildx bake --set target.platform=linux/arm64
    $ docker buildx bake --set foo*.args.mybuildarg=value   # 覆盖所有以 'foo' 开头目标的构建参数
    $ docker buildx bake --set *.platform=linux/arm64       # 覆盖所有目标的平台
    $ docker buildx bake --set foo*.no-cache                # 仅对以 'foo' 开头的目标跳过缓存
    $ docker buildx bake --set target.platform+=linux/arm64 # 将 'linux/arm64' 追加到平台列表
    ```

    可覆盖以下字段：

    * `annotations`
    * `attest`
    * `args`
    * `cache-from`
    * `cache-to`
    * `call`
    * `context`
    * `dockerfile`
    * `entitlements`
    * `extra-hosts`
    * `labels`
    * `load`
    * `no-cache`
    * `no-cache-filter`
    * `output`
    * `platform`
    * `pull`
    * `push`
    * `secrets`
    * `ssh`
    * `tags`
    * `target`

    以下字段可使用 `+=` 运算符进行追加：

    * `annotations`¹
    * `attest`¹
    * `cache-from`
    * `cache-to`
    * `entitlements`¹
    * `no-cache-filter`
    * `output`
    * `platform`
    * `secrets`
    * `ssh`
    * `tags`

    > [!NOTE]
    > ¹ 这些字段默认即为追加。
deprecated: false
hidden: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

