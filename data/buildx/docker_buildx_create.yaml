command: docker buildx create
short: 创建一个新的构建器实例
long: |-
    使用 Create 可以新建一个构建器实例，并将其指向某个 Docker 上下文或终端点。
    其中，上下文（context）指的是 `docker context ls` 中列出的上下文名称；终端点（endpoint）
    指的是 Docker 套接字的地址（例如 `DOCKER_HOST` 的值）。

    默认情况下，会使用当前的 Docker 配置来确定上下文/终端点的取值。

    构建器实例是可以发起构建的隔离环境。所有 Docker 上下文也都会获得一个默认的构建器实例。
usage: docker buildx create [OPTIONS] [CONTEXT|ENDPOINT]
pname: docker buildx
plink: docker_buildx.yaml
options:
    - option: append
      value_type: bool
      default_value: "false"
      description: 在不更改构建器的情况下向其追加一个节点
      details_url: '#append'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: bootstrap
      value_type: bool
      default_value: "false"
      description: 创建后启动构建器
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: builder
      value_type: string
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: buildkitd-config
      value_type: string
      description: BuildKit 守护进程配置文件
      details_url: '#buildkitd-config'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: buildkitd-flags
      value_type: string
      description: BuildKit 守护进程启动参数
      details_url: '#buildkitd-flags'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: config
      value_type: string
      description: BuildKit 守护进程配置文件
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: driver
      value_type: string
      description: |
        要使用的驱动程序（可用值：`docker-container`、`kubernetes`、`remote`）
      details_url: '#driver'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: driver-opt
      value_type: stringArray
      default_value: '[]'
      description: 驱动的附加选项
      details_url: '#driver-opt'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: leave
      value_type: bool
      default_value: "false"
      description: 在不更改构建器的情况下从构建器移除一个节点
      details_url: '#leave'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: name
      value_type: string
      description: 构建器实例名称
      details_url: '#name'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: node
      value_type: string
      description: 创建或修改指定名称的节点
      details_url: '#node'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: platform
      value_type: stringArray
      default_value: '[]'
      description: 为当前节点固定支持的平台
      details_url: '#platform'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: use
      value_type: bool
      default_value: "false"
      description: 将当前构建器实例设置为该实例
      details_url: '#use'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
inherited_options:
    - option: debug
      shorthand: D
      value_type: bool
      default_value: "false"
      description: 启用调试日志
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
examples: |-
    ### 向现有构建器追加一个新节点（--append） {#append}

    `--append` 会将该命令的行为改为：向通过 `--name` 指定的现有构建器追加一个新节点。
    Buildx 会根据节点所支持的平台，为构建自动选择合适的节点。

    ```console
    $ docker buildx create mycontext1
    eager_beaver

    $ docker buildx create --name eager_beaver --append mycontext2
    eager_beaver
    ```

    ### 为 BuildKit 守护进程指定配置文件（--buildkitd-config） {#buildkitd-config}

    ```text
    --buildkitd-config FILE
    ```

    指定 BuildKit 守护进程要使用的配置文件。
    该配置可被 [`--buildkitd-flags`](#buildkitd-flags) 覆盖。
    参见[示例 BuildKit 守护进程配置文件](https://github.com/moby/buildkit/blob/master/docs/buildkitd.toml.md)。

    如果未显式指定配置文件，Buildx 将按以下默认路径查找：

    * `$BUILDX_CONFIG/buildkitd.default.toml`
    * `$DOCKER_CONFIG/buildx/buildkitd.default.toml`
    * `~/.docker/buildx/buildkitd.default.toml`

    注意：如果你创建的是 `docker-container` 驱动的构建器，并且在 `buildkitd.toml`
    配置中为仓库（registries）指定了证书，这些文件将被复制到容器内的
    `/etc/buildkit/certs`，并相应更新配置。

    ### 为 BuildKit 守护进程添加启动参数（--buildkitd-flags） {#buildkitd-flags}

    ```text
    --buildkitd-flags FLAGS
    ```

    在启动 BuildKit 守护进程时附加参数。这些参数的优先级高于
    [`--buildkitd-config`](#buildkitd-config) 指定的配置文件。可通过
    `buildkitd --help` 查看可用参数。

    ```text
    --buildkitd-flags '--debug --debugaddr 0.0.0.0:6666'
    ```

    #### BuildKit 守护进程的网络模式

    你可以通过 `buildkitd.toml` 中的 `worker.oci.networkMode`（即由
    [`--buildkitd-config`](#buildkitd-config) 指定的配置文件）或这里的
    `--oci-worker-net` 标志来设置 BuildKit 守护进程的网络模式。默认值为 `auto`，
    可选值包括 `bridge`、`cni`、`host`：

    ```text
    --buildkitd-flags '--oci-worker-net bridge'
    ```

    > [!NOTE]
    > 网络模式 "bridge" 自 BuildKit v0.13 起受支持，并将在即将发布的 v0.14 中成为默认值。

    ### 指定要使用的构建器驱动（--driver） {#driver}

    ```text
    --driver DRIVER
    ```

    指定要使用的构建器驱动。驱动代表一种 BuildKit 后端的配置。
    Buildx 支持以下驱动：

    * `docker`（默认）
    * `docker-container`
    * `kubernetes`
    * `remote`

    关于构建驱动的更多信息，见[此处](/build/builders/drivers/)。

    #### `docker` 驱动

    使用集成在 Docker 守护进程中的构建器。在此驱动下，`buildx build` 默认隐含
    启用 [`--load`](/reference/cli/docker/buildx/build/#load)。但当前不支持
    构建多平台镜像或导出缓存。

    #### `docker-container` 驱动

    通过 Docker 启动一个 BuildKit 容器。在此驱动下，既支持多平台镜像构建，
    也支持导出缓存。

    与 `docker` 驱动不同，构建出的镜像不会自动出现在 `docker images` 中，
    需要使用 [`build --load`](/reference/cli/docker/buildx/build/#load) 才能载入到本地镜像列表。

    #### `kubernetes` 驱动

    使用 Kubernetes Pod。在此驱动下，你可以启动使用指定 BuildKit 镜像的 Pod 来执行构建。

    与 `docker` 驱动不同，构建出的镜像不会自动出现在 `docker images` 中，
    需要使用 [`build --load`](/reference/cli/docker/buildx/build/#load) 才能载入到本地镜像列表。

    #### `remote` 驱动

    通过任意连接使用远程的 BuildKit 守护进程实例。在此驱动下，
    你需要自行创建并管理 buildkit 实例，并将 buildx 指向该实例。

    与 `docker` 驱动不同，构建出的镜像不会自动出现在 `docker images` 中，
    需要使用 [`build --load`](/reference/cli/docker/buildx/build/#load) 才能载入到本地镜像列表。

    ### 设置驱动的额外选项（--driver-opt） {#driver-opt}

    ```text
    --driver-opt OPTIONS
    ```

    传递驱动特定的附加选项。
    可用选项请参考对应驱动的详细文档：

    * [`docker` driver](/build/builders/drivers/docker/)
    * [`docker-container` driver](/build/builders/drivers/docker-container/)
    * [`kubernetes` driver](/build/builders/drivers/kubernetes/)
    * [`remote` driver](/build/builders/drivers/remote/)

    ### 从构建器中移除节点（--leave） {#leave}

    `--leave` 会将该命令的行为改为：从构建器中移除一个节点。
    需要通过 `--name` 指定目标构建器，并用 `--node` 指定要移除的节点。

    ```console
    $ docker buildx create --name mybuilder --node mybuilder0 --leave
    ```

    ### 指定构建器名称（--name） {#name}

    ```text
    --name NAME
    ```

    `--name` 指定要创建或修改的构建器名称。
    如未指定，将自动生成一个名称。

    ### 指定节点名称（--node） {#node}

    ```text
    --node NODE
    ```

    `--node` 指定要创建或修改的节点名称。
    如未指定，节点名称将默认与其所属构建器同名，并带有一个索引后缀。

    ### 设置节点支持的平台（--platform） {#platform}

    ```text
    --platform PLATFORMS
    ```

    `--platform` 用于设置该节点支持的平台。其取值为以逗号分隔的列表，
    格式为 OS/architecture/variant。节点也会自动检测其支持的平台，
    但手动指定的值优先级更高，并可用于多个节点都支持同一平台的场景。

    ```console
    $ docker buildx create --platform linux/amd64
    $ docker buildx create --platform linux/arm64,linux/arm/v7
    ```

    ### 自动切换到新创建的构建器（--use） {#use}

    `--use` 会在创建成功后自动将当前构建器切换为新创建的实例。
    等同于执行 `docker buildx use $(docker buildx create ...)`。
deprecated: false
hidden: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

