command: docker buildx build
aliases: docker build, docker builder build, docker image build, docker buildx b
short: 启动一次构建
long: "`docker buildx build` 命令使用 BuildKit 启动构建。"
usage: docker buildx build [OPTIONS] PATH | URL | -
pname: docker buildx
plink: docker_buildx.yaml
options:
    - option: add-host
      value_type: stringSlice
      default_value: '[]'
      description: '添加自定义主机名到 IP 的映射（格式：`host:ip`）'
      details_url: '#add-host'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: allow
      value_type: stringArray
      default_value: '[]'
      description: |
        允许额外的特权授权（例如 `network.host`、`security.insecure`、`device`）
      details_url: '#allow'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: annotation
      value_type: stringArray
      default_value: '[]'
      description: 为镜像添加注解
      details_url: '#annotation'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: attest
      value_type: stringArray
      default_value: '[]'
      description: '证明参数（格式：`type=sbom,generator=image`）'
      details_url: '#attest'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: build-arg
      value_type: stringArray
      default_value: '[]'
      description: 设置构建时变量
      details_url: '#build-arg'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: build-context
      value_type: stringArray
      default_value: '[]'
      description: 额外的构建上下文（例如 `name=path`）
      details_url: '#build-context'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: cache-from
      value_type: stringArray
      default_value: '[]'
      description: |
        外部缓存源（例如 `user/app:cache`，`type=local,src=path/to/dir`）
      details_url: '#cache-from'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: cache-to
      value_type: stringArray
      default_value: '[]'
      description: |
        缓存导出目标（例如 `user/app:cache`，`type=local,dest=path/to/dir`）
      details_url: '#cache-to'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: call
      value_type: string
      default_value: build
      description: 设置用于评估构建的方法（`check`、`outline`、`targets`）
      details_url: '#call'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: cgroup-parent
      value_type: string
      description: 为构建期间的 `RUN` 指令设置父 cgroup
      details_url: '#cgroup-parent'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: check
      value_type: bool
      description: 等同于 `--call=check` 的简写
      details_url: '#check'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: compress
      value_type: bool
      default_value: "false"
      description: 使用 gzip 压缩构建上下文
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: cpu-period
      value_type: int64
      default_value: "0"
      description: 限制 CPU CFS（完全公平调度器）周期
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: cpu-quota
      value_type: int64
      default_value: "0"
      description: 限制 CPU CFS（完全公平调度器）配额
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: cpu-shares
      shorthand: c
      value_type: int64
      default_value: "0"
      description: CPU 共享（相对权重）
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: cpuset-cpus
      value_type: string
      description: 允许执行的 CPU 集（如 `0-3`、`0,1`）
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: cpuset-mems
      value_type: string
      description: 允许执行的内存节点（MEM）（如 `0-3`、`0,1`）
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: file
      shorthand: f
      value_type: string
      description: 'Dockerfile 文件名（默认：`PATH/Dockerfile`）'
      details_url: '#file'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: force-rm
      value_type: bool
      default_value: "false"
      description: 始终删除中间容器
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: iidfile
      value_type: string
      description: 将镜像 ID 写入文件
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: isolation
      value_type: string
      description: 容器隔离技术
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: label
      value_type: stringArray
      default_value: '[]'
      description: 为镜像设置元数据
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: load
      value_type: bool
      default_value: "false"
      description: 等同于 `--output=type=docker` 的简写
      details_url: '#load'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: memory
      shorthand: m
      value_type: string
      description: 内存限制
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: memory-swap
      value_type: string
      description: |
        Swap 限制等于内存与交换区之和：`-1` 表示不限制
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: metadata-file
      value_type: string
      description: 将构建结果的元数据写入文件
      details_url: '#metadata-file'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: network
      value_type: string
      default_value: default
      description: 设置构建期间 `RUN` 指令的网络模式
      details_url: '#network'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: no-cache
      value_type: bool
      default_value: "false"
      description: 构建镜像时不使用缓存
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: no-cache-filter
      value_type: stringArray
      default_value: '[]'
      description: 不缓存指定阶段
      details_url: '#no-cache-filter'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: output
      shorthand: o
      value_type: stringArray
      default_value: '[]'
      description: '输出目的地（格式：`type=local,dest=path`）'
      details_url: '#output'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: platform
      value_type: stringArray
      default_value: '[]'
      description: 设置构建的目标平台
      details_url: '#platform'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: print
      value_type: string
      description: 打印信息请求的结果（例如 outline、targets）
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: true
      kubernetes: false
      swarm: false
    - option: progress
      value_type: string
      default_value: auto
      description: |
        设置进度输出类型（`auto`、`none`、`plain`、`quiet`、`rawjson`、`tty`）。使用 `plain` 显示容器输出
      details_url: '#progress'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: provenance
      value_type: string
      description: 等同于 `--attest=type=provenance` 的简写
      details_url: '#provenance'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: pull
      value_type: bool
      default_value: "false"
      description: 始终尝试拉取所有被引用的镜像
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: push
      value_type: bool
      default_value: "false"
      description: 等同于 `--output=type=registry` 的简写
      details_url: '#push'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: quiet
      shorthand: q
      value_type: bool
      default_value: "false"
      description: 压制构建输出，仅在成功时打印镜像 ID
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: rm
      value_type: bool
      default_value: "true"
      description: 构建成功后删除中间容器
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: sbom
      value_type: string
      description: 等同于 `--attest=type=sbom` 的简写
      details_url: '#sbom'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: secret
      value_type: stringArray
      default_value: '[]'
      description: |
        向构建暴露的机密（格式：`id=mysecret[,src=/local/secret]`）
      details_url: '#secret'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: security-opt
      value_type: stringSlice
      default_value: '[]'
      description: 安全选项
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: shm-size
      value_type: bytes
      default_value: "0"
      description: 构建容器的共享内存大小
      details_url: '#shm-size'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: squash
      value_type: bool
      default_value: "false"
      description: 将新构建的多层压缩为单层
      deprecated: false
      hidden: true
      experimental: false
      experimentalcli: true
      kubernetes: false
      swarm: false
    - option: ssh
      value_type: stringArray
      default_value: '[]'
      description: |
        向构建暴露的 SSH 代理套接字或密钥（格式：`default|<id>[=<socket>|<key>[,<key>]]`）
      details_url: '#ssh'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: tag
      shorthand: t
      value_type: stringArray
      default_value: '[]'
      description: '名称及可选标签（格式：`name:tag`）'
      details_url: '#tag'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: target
      value_type: string
      description: 设置要构建的目标阶段
      details_url: '#target'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: ulimit
      value_type: ulimit
      default_value: '[]'
      description: Ulimit 选项
      details_url: '#ulimit'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
inherited_options:
    - option: builder
      value_type: string
      description: 覆盖已配置的构建器实例
      details_url: '#builder'
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
    - option: debug
      shorthand: D
      value_type: bool
      default_value: "false"
      description: 启用调试日志
      deprecated: false
      hidden: false
      experimental: false
      experimentalcli: false
      kubernetes: false
      swarm: false
examples: |-
    ### 向容器 hosts 文件添加条目（--add-host）{#add-host}

    你可以通过一个或多个 `--add-host` 标志，将其他主机写入构建容器的 `/etc/hosts` 文件。
    下例为主机名 `my-hostname` 与 `my_hostname_v6` 添加固定地址：

    ```console
    $ docker buildx build --add-host my_hostname=8.8.8.8 --add-host my_hostname_v6=2001:4860:4860::8888 .
    ```

    如果构建过程需要访问宿主机上的服务，可以在 `--add-host` 中使用特殊值 `host-gateway`。
    下面的示例让构建容器把 `host.docker.internal` 解析为宿主机网关 IP：

    ```console
    $ docker buildx build --add-host host.docker.internal=host-gateway .
    ```

    IPv6 地址可以用方括号包裹。
    `=` 与 `:` 都是合法的分隔符。
    下面两种写法都有效：

    ```console
    $ docker buildx build --add-host my-hostname:10.180.0.1 --add-host my-hostname_v6=[2001:4860:4860::8888] .
    ```

    ### 创建注解（--annotation）{#annotation}

    ```text
    --annotation="key=value"
    --annotation="[type:]key=value"
    ```

    向镜像索引（image index）、清单（manifest）或描述符（descriptor）添加 OCI 注解。
    下面的示例把注解 `foo=bar` 添加到镜像清单：

    ```console
    $ docker buildx build -t TAG --annotation "foo=bar" --push .
    ```

    你可以选择添加类型前缀来指定注解的作用层级。默认情况下会注解镜像清单。
    下面示例将 `foo=bar` 注解添加到镜像索引，而不是清单：

    ```console
    $ docker buildx build -t TAG --annotation "index:foo=bar" --push .
    ```

    你也可以用英文逗号（,）分隔多个类型，让同一注解应用于多个镜像组件。
    下面示例把 `foo=bar` 注解同时添加到镜像索引、描述符与清单：

    ```console
    $ docker buildx build -t TAG --annotation "index,manifest,manifest-descriptor:foo=bar" --push .
    ```

    你还可以在类型前缀中使用方括号（`[os/arch]`）指定平台限定，只对匹配平台的清单添加注解。
    下面示例仅为 `linux/amd64` 平台的清单添加 `foo=bar` 注解：

    ```console
    $ docker buildx build -t TAG --annotation "manifest[linux/amd64]:foo=bar" --push .
    ```

    平台限定不支持通配符；例如不能使用 `manifest[linux/*]` 这样的前缀来匹配所有 `linux` 平台。

    了解更多注解的用法，参见
    [注解](/build/building/annotations/)。

    ### 创建证明（--attest）{#attest}

    ```text
    --attest=type=sbom,...
    --attest=type=provenance,...
    ```

    创建[镜像证明（attestations）](/build/metadata/attestations/)。
    当前 BuildKit 支持：

    - `sbom` - Software Bill of Materials.

      使用 `--attest=type=sbom` 在构建时为镜像生成 SBOM。
      也可使用[`--sbom` 简写](#sbom)。

      了解更多，见[此处](/build/metadata/attestations/sbom/)。

    - `provenance` - SLSA Provenance

      使用 `--attest=type=provenance` 在构建时为镜像生成来源证明（provenance）。
      也可使用[`--provenance` 简写](#provenance)。

      默认情况下，会为构建结果创建最小化的来源证明，并且只在镜像被推送到仓库时附加。

      了解更多，见[此处](/build/metadata/attestations/slsa-provenance/)。

    ### 允许额外的特权授权（--allow）{#allow}

    ```text
    --allow=ENTITLEMENT
    ```

    允许额外的特权授权。可用的授权包括：

    - `network.host` - 允许以宿主机网络执行。
    - `security.insecure` - 允许在无沙箱的情况下执行。参见
      [相关 Dockerfile 扩展](/reference/dockerfile/#run---security)。
    - `device` - 允许访问 CDI（Container Device Interface）设备。
       - `--allow device` - 允许访问所有设备。
       - `--allow device=kind|name` - 仅允许访问指定设备。
       - `--allow device=kind|name,alias=kind|name` - 仅允许访问指定设备，并可指定别名。

    要启用这些授权，BuildKit 守护进程也必须通过 `--allow-insecure-entitlement` 允许对应的权限
    （参见 [`create --buildkitd-flags`](/reference/cli/docker/buildx/create/#buildkitd-flags)）。

    ```console
    $ docker buildx create --use --name insecure-builder --buildkitd-flags '--allow-insecure-entitlement security.insecure'
    $ docker buildx build --allow security.insecure .
    ```

    ### 设置构建时变量（--build-arg）{#build-arg}

    你可以在 Dockerfile 中使用 `ENV` 指令定义变量值，这些值会持久化到生成的镜像中。
    但很多场景并不需要持久化，用户希望能根据构建所在主机以不同方式指定变量。

    一个常见场景是设置 `http_proxy`，或用于拉取中间文件的源版本。
    `ARG` 指令允许 Dockerfile 作者定义可在构建时通过 `--build-arg` 传入的参数：

    ```console
    $ docker buildx build --build-arg HTTP_PROXY=http://10.20.30.2:1234 --build-arg FTP_PROXY=http://40.50.60.5:4567 .
    ```

    该标志用于传递构建时变量，在 `RUN` 指令中可像常规环境变量一样访问。
    与 `ENV` 不同，这些值不会持久化到中间或最终镜像中。每个构建参数都需单独使用一次 `--build-arg`。

    使用该标志不会改变构建过程回显 Dockerfile 中 `ARG` 行时的输出。

    关于 `ARG` 与 `ENV` 的更多信息，参见
    [Dockerfile 参考](/reference/dockerfile/)。

    也可以不给 `--build-arg` 指定值，此时守护进程会将本地环境中的变量值传入构建容器：

    ```console
    $ export HTTP_PROXY=http://10.20.30.2:1234
    $ docker buildx build --build-arg HTTP_PROXY .
    ```

    该用法与 `docker run -e` 类似。更多信息参见 [`docker run` 文档](/reference/cli/docker/container/run/#env)。

    还提供了一些实用的内置构建参数，例如：

    * `BUILDKIT_CONTEXT_KEEP_GIT_DIR=<bool>`: trigger git context to keep the `.git` directory
    * `BUILDKIT_INLINE_CACHE=<bool>`: inline cache metadata to image config or not
    * `BUILDKIT_MULTI_PLATFORM=<bool>`: opt into deterministic output regardless of multi-platform output or not

    ```console
    $ docker buildx build --build-arg BUILDKIT_MULTI_PLATFORM=1 .
    ```

    更多内置构建参数说明见
    [Dockerfile 参考文档](/reference/dockerfile/#buildkit-built-in-build-args)。

    ### 额外构建上下文（--build-context）{#build-context}

    ```text
    --build-context=name=VALUE
    ```

    定义带有指定内容的额外构建上下文。在 Dockerfile 中使用 `FROM name` 或 `--from=name` 即可访问。
    若 Dockerfile 中存在同名阶段，则会被该上下文覆盖。

    取值可以是：

    - local source directory
    - [local OCI layout compliant directory](https://github.com/opencontainers/image-spec/blob/main/image-layout.md)
    - container image
    - Git URL
    - HTTP URL

    #### 使用本地路径 {#local-path}

    暴露一个次级本地源目录：

    ```console
    $ docker buildx build --build-context project=path/to/project/source .
    # docker buildx build --build-context project=https://github.com/myuser/project.git .
    ```

    #### 使用容器镜像 {#docker-image}

    使用 `docker-image://` 协议。

    将 `alpine:latest` 替换为固定版本：

    ```console
    $ docker buildx build --build-context alpine=docker-image://alpine@sha256:0123456789 .
    ```

    ```dockerfile
    # syntax=docker/dockerfile:1
    FROM alpine
    COPY --from=project myfile /
    ```

    #### 使用 OCI layout 目录作为构建上下文 {#source-oci-layout}

    使用 `oci-layout:///` 协议。

    从本地[符合 OCI layout 的目录](https://github.com/opencontainers/image-spec/blob/main/image-layout.md)
    获取镜像，可通过标签或摘要指定：

    ```console
    $ docker buildx build --build-context foo=oci-layout:///path/to/local/layout:<tag>
    $ docker buildx build --build-context foo=oci-layout:///path/to/local/layout@sha256:<digest>
    ```

    ```dockerfile
    # syntax=docker/dockerfile:1
    FROM alpine
    RUN apk add git
    COPY --from=foo myfile /

    FROM foo
    ```

    该目录必须符合 [OCI layout 规范](https://github.com/opencontainers/image-spec/blob/main/image-layout.md)。

    ### 覆盖已配置的构建器实例（--builder）{#builder}

    等同于 [`buildx --builder`](/reference/cli/docker/buildx/#builder)。

    ### 使用外部缓存源（--cache-from）{#cache-from}

    ```text
    --cache-from=[NAME|type=TYPE[,KEY=VALUE]]
    ```

    为构建使用外部缓存源。支持的类型包括：

    - [`registry`](/build/cache/backends/registry/)：
      可从仓库中的缓存清单或（特殊）镜像配置导入缓存。
    - [`local`](/build/cache/backends/local/)：
      可从先前通过 `--cache-to` 导出的本地文件导入缓存。
    - [`gha`](/build/cache/backends/gha/)：
      可从仓库中先前通过 `--cache-to` 导出的缓存导入（GitHub Actions Cache）。
    - [`s3`](/build/cache/backends/s3/)：
      可从 S3 bucket 中先前通过 `--cache-to` 导出的缓存导入。
    - [`azblob`](/build/cache/backends/azblob/)：
      可从 Azure 存储中先前通过 `--cache-to` 导出的缓存导入。

    若未指定类型，则按给定引用使用 `registry` 导入器。

    ```console
    $ docker buildx build --cache-from=user/app:cache .
    $ docker buildx build --cache-from=user/app .
    $ docker buildx build --cache-from=type=registry,ref=user/app .
    $ docker buildx build --cache-from=type=local,src=path/to/cache .
    $ docker buildx build --cache-from=type=gha .
    $ docker buildx build --cache-from=type=s3,region=eu-west-1,bucket=mybucket .
    ```

    > [!NOTE]
    > 更多关于缓存导入/导出器及可用属性，参见
    > [缓存存储后端文档](/build/cache/backends/)

    ### 将构建缓存导出到外部目标（--cache-to）{#cache-to}

    ```text
    --cache-to=[NAME|type=TYPE[,KEY=VALUE]]
    ```

    将构建缓存导出到外部缓存目标。支持的类型包括：

    - [`registry`](/build/cache/backends/registry/)：将构建缓存导出为仓库中的缓存清单。
    - [`local`](/build/cache/backends/local/)：将缓存导出到客户端本地目录。
    - [`inline`](/build/cache/backends/inline/)：将缓存元数据写入镜像配置。
    - [`gha`](/build/cache/backends/gha/)：通过 GitHub Actions Cache API 导出缓存。
    - [`s3`](/build/cache/backends/s3/)：导出到 S3 bucket。
    - [`azblob`](/build/cache/backends/azblob/)：导出到 Azure 存储。

    ```console
    $ docker buildx build --cache-to=user/app:cache .
    $ docker buildx build --cache-to=type=inline .
    $ docker buildx build --cache-to=type=registry,ref=user/app .
    $ docker buildx build --cache-to=type=local,dest=path/to/cache .
    $ docker buildx build --cache-to=type=gha .
    $ docker buildx build --cache-to=type=s3,region=eu-west-1,bucket=mybucket .
    ```

    > [!NOTE]
    > 更多关于缓存导入/导出器及可用属性，参见
    > [缓存存储后端文档](/build/cache/backends/)

    ### 调用前端方法（--call）{#call}

    ```text
    --call=[build|check|outline|targets]
    ```

    BuildKit 前端（frontend）可以通过“方法”支持不同的构建执行模式。
    这些方法用于改变或扩展构建行为，例如进行检查、验证，或生成不同的输出。

    `docker buildx build` 的 `--call` 标志用于指定要执行的前端方法。
    未指定时，默认执行构建并评估[构建检查](/reference/build-checks/)。

    对于 Dockerfile，支持以下方法：

    | Command                        | Description                                                                                                         |
    | ------------------------------ | ------------------------------------------------------------------------------------------------------------------- |
    | `build` (default)              | Execute the build and evaluate build checks for the current build target.                                           |
    | `check`                        | Evaluate build checks for the either the entire Dockerfile or the selected target, without executing a build.       |
    | `outline`                      | Show the build arguments that you can set for a target, and their default values.                                   |
    | `targets`                      | List all the build targets in the Dockerfile.                                                                       |
    | `subrequests.describe`         | List all the frontend methods that the current frontend supports.                                                   |

    其他前端可能实现相同或不同的方法。
    使用 `--call=subrequests.describe` 可查看当前前端支持的方法列表。

    ```console
    $ docker buildx build -q --call=subrequests.describe .

    NAME                 VERSION DESCRIPTION
    outline              1.0.0   List all parameters current build target supports
    targets              1.0.0   List all targets current build supports
    subrequests.describe 1.0.0   List available subrequest types
    ```

    #### 描述

    若可用，[`--call=targets`](#call-targets) 与 [`--call=outline`](#call-outline) 会包含构建目标和参数的描述。
    这些描述来自 Dockerfile 注释：`FROM` 前一行的注释成为目标阶段的描述，`ARG` 前的注释成为参数描述。
    注释需以阶段或参数名开头，例如：

    ```dockerfile
    # syntax=docker/dockerfile:1

    # GO_VERSION sets the Go version for the build
    ARG GO_VERSION=1.22

    # base-builder is the base stage for building the project
    FROM golang:${GO_VERSION} AS base-builder
    ```

    运行 `docker buildx build --call=outline` 后，输出会包含这些描述：

    ```console
    $ docker buildx build -q --call=outline .

    TARGET:      base-builder
    DESCRIPTION: is the base stage for building the project

    BUILD ARG    VALUE   DESCRIPTION
    GO_VERSION   1.22    sets the Go version for the build
    ```

    更多编写 Dockerfile 文档注释的示例，参见
    [Docker 文档项目的 Dockerfile](https://github.com/docker/docs/blob/main/Dockerfile)。

    #### 调用：check（--check）{#check}

    `check` 方法在不执行构建的情况下评估构建检查。
    `--check` 是 `--call=check` 的便捷写法。用它可在开始构建前验证配置。

    ```console
    $ docker buildx build -q --check https://github.com/docker/docs.git

    WARNING: InvalidBaseImagePlatform
    Base image wjdp/htmltest:v0.17.0 was pulled with platform "linux/amd64", expected "linux/arm64" for current build
    Dockerfile:43
    --------------------
      41 |         "#content/desktop/previous-versions/*.md"
      42 |
      43 | >>> FROM wjdp/htmltest:v${HTMLTEST_VERSION} AS test
      44 |     WORKDIR /test
      45 |     COPY --from=build /out ./public
    --------------------
    ```

    未指定目标时，`--check` 会评估整个 Dockerfile；如需仅评估特定目标，请配合 `--target` 使用。

    #### 调用：outline

    `outline` 打印指定目标（未指定则为默认目标）的名称，以及该目标可用的构建参数及其默认值（如有）。

    示例：默认目标 `release` 及其构建参数如下：

    ```console
    $ docker buildx build -q --call=outline https://github.com/docker/docs.git

    TARGET:      release
    DESCRIPTION: is an empty scratch image with only compiled assets

    BUILD ARG          VALUE     DESCRIPTION
    GO_VERSION         1.22      sets the Go version for the base stage
    HUGO_VERSION       0.127.0
    HUGO_ENV                     sets the hugo.Environment (production, development, preview)
    DOCS_URL                     sets the base URL for the site
    PAGEFIND_VERSION   1.1.0
    ```

    这意味着可以通过以下构建参数配置 `release` 目标：

    ```console
    $ docker buildx build \
      --build-arg GO_VERSION=1.22 \
      --build-arg HUGO_VERSION=0.127.0 \
      --build-arg HUGO_ENV=production \
      --build-arg DOCS_URL=https://example.com \
      --build-arg PAGEFIND_VERSION=1.1.0 \
      --target release https://github.com/docker/docs.git
    ```

    #### 调用：targets

    `targets` 列出 Dockerfile 中全部构建目标（阶段），这些阶段都可以用 `--target` 指定构建。
    同时会标明默认目标（未指定目标时构建该目标）。

    ```console
    $ docker buildx build -q --call=targets https://github.com/docker/docs.git

    TARGET            DESCRIPTION
    base              is the base stage with build dependencies
    node              installs Node.js dependencies
    hugo              downloads and extracts the Hugo binary
    build-base        is the base stage for building the site
    dev               is for local development with Docker Compose
    build             creates production builds with Hugo
    lint              lints markdown files
    test              validates HTML output and checks for broken links
    update-modules    downloads and vendors Hugo modules
    vendor            is an empty stage with only vendored Hugo modules
    build-upstream    builds an upstream project with a replacement module
    validate-upstream validates HTML output for upstream builds
    unused-media      checks for unused graphics and other media
    pagefind          installs the Pagefind runtime
    index             generates a Pagefind index
    test-go-redirects checks that the /go/ redirects are valid
    release (default) is an empty scratch image with only compiled assets
    ```

    ### 使用自定义父 cgroup（--cgroup-parent）{#cgroup-parent}

    使用 `--cgroup-parent` 运行 `docker buildx build` 时，守护进程会按
    [`docker run` 对应标志](/reference/cli/docker/container/run/#cgroup-parent)
    为构建所用容器设置父 cgroup。

    ### 指定 Dockerfile（-f, --file）{#file}

    ```console
    $ docker buildx build -f <filepath> .
    ```

    指定要使用的 Dockerfile 路径。
    未指定时，默认使用构建上下文根目录下的 `Dockerfile`。

    若需从 stdin 读取 Dockerfile，可将 `-` 作为 `--file` 的参数。

    ```console
    $ cat Dockerfile | docker buildx build -f - .
    ```

    ### 将单平台构建结果加载到 `docker images`（--load）{#load}

    等同于 [`--output=type=docker`](#docker)。会自动把单平台构建结果加载到 `docker images`。

    ### 将构建结果元数据写入文件（--metadata-file）{#metadata-file}

    如需输出镜像摘要等构建元数据，请使用 `--metadata-file`。
    元数据会以 JSON 对象形式写入指定文件。该文件所在目录必须已存在且可写。

    ```console
    $ docker buildx build --load --metadata-file metadata.json .
    $ cat metadata.json
    ```

    ```json
    {
      "buildx.build.provenance": {},
      "buildx.build.ref": "mybuilder/mybuilder0/0fjb6ubs52xx3vygf6fgdl611",
      "buildx.build.warnings": {},
      "containerimage.config.digest": "sha256:2937f66a9722f7f4a2df583de2f8cb97fc9196059a410e7f00072fc918930e66",
      "containerimage.descriptor": {
        "annotations": {
          "config.digest": "sha256:2937f66a9722f7f4a2df583de2f8cb97fc9196059a410e7f00072fc918930e66",
          "org.opencontainers.image.created": "2022-02-08T21:28:03Z"
        },
        "digest": "sha256:19ffeab6f8bc9293ac2c3fdf94ebe28396254c993aea0b5a542cfb02e0883fa3",
        "mediaType": "application/vnd.oci.image.manifest.v1+json",
        "size": 506
      },
      "containerimage.digest": "sha256:19ffeab6f8bc9293ac2c3fdf94ebe28396254c993aea0b5a542cfb02e0883fa3"
    }
    ```

    > [!NOTE]
    > Build record [provenance](/build/metadata/attestations/slsa-provenance/#provenance-attestation-example)
    > (`buildx.build.provenance`) includes minimal provenance by default. Set the
    > `BUILDX_METADATA_PROVENANCE` environment variable to customize this behavior:
    >
    > - `min` sets minimal provenance (default).
    > - `max` sets full provenance.
    > - `disabled`, `false` or `0` doesn't set any provenance.

    > [!NOTE]
    > Build warnings (`buildx.build.warnings`) are not included by default. Set the
    > `BUILDX_METADATA_WARNINGS` environment variable to `1` or `true` to
    > include them.

    ### 为构建时的 RUN 指令设置网络模式（--network）{#network}

    可选的网络模式包括：

    - `default` (default): Run in the default network.
    - `none`: Run with no network access.
    - `host`: Run in the host’s network environment.

    详情参见 [Dockerfile 参考](/reference/dockerfile/#run---network)。

    ### 指定阶段忽略构建缓存（--no-cache-filter）{#no-cache-filter}

    `--no-cache-filter` 可为多阶段 Dockerfile 指定一个或多个阶段不使用构建缓存。
    指定多个阶段时使用逗号分隔：

    ```console
    $ docker buildx build --no-cache-filter stage1,stage2,stage3 .
    ```

    例如，下述 Dockerfile 包含四个阶段：

    - `base`
    - `install`
    - `test`
    - `release`

    ```dockerfile
    # syntax=docker/dockerfile:1

    FROM oven/bun:1 AS base
    WORKDIR /app

    FROM base AS install
    WORKDIR /temp/dev
    RUN --mount=type=bind,source=package.json,target=package.json \
        --mount=type=bind,source=bun.lockb,target=bun.lockb \
        bun install --frozen-lockfile

    FROM base AS test
    COPY --from=install /temp/dev/node_modules node_modules
    COPY . .
    RUN bun test

    FROM base AS release
    ENV NODE_ENV=production
    COPY --from=install /temp/dev/node_modules node_modules
    COPY . .
    ENTRYPOINT ["bun", "run", "index.js"]
    ```

    忽略 `install` 阶段的缓存：

    ```console
    $ docker buildx build --no-cache-filter install .
    ```

    同时忽略 `install` 与 `release` 阶段的缓存：

    ```console
    $ docker buildx build --no-cache-filter install,release .
    ```

    `--no-cache-filter` 的实参必须是阶段名称。

    ### 设置构建结果的导出方式（-o, --output）{#output}

    ```text
    -o, --output=[PATH,-,type=TYPE[,KEY=VALUE]
    ```

    设置构建结果的导出方式。使用 `docker` [构建驱动](/build/builders/drivers/) 时，
    默认将结果镜像导出到本地镜像存储。
    `--output` 允许将结果直接导出到客户端文件系统、OCI 镜像 tar、镜像仓库等。

    在 `docker` 驱动下，仅支持本地、tar 与 image 这几类
    [导出器](/build/exporters/)。`docker-container` 驱动支持全部导出器。

    仅传入文件路径时使用本地导出器；若值为 `-`，则使用 `tar` 导出器并写入 stdout。

    ```console
    $ docker buildx build -o . .
    $ docker buildx build -o outdir .
    $ docker buildx build -o - . > out.tar
    $ docker buildx build -o type=docker .
    $ docker buildx build -o type=docker,dest=- . > myimage.tar
    $ docker buildx build -t tonistiigi/foo -o type=registry
    ```

    可多次使用该标志导出多个输出。

    Supported exported types are:

    - [`local`](#local)
    - [`tar`](#tar)
    - [`oci`](#oci)
    - [`docker`](#docker)
    - [`image`](#image)
    - [`registry`](#registry)

    #### `local`

    `local` 将所有结果文件写入客户端目录，文件所有者为当前用户。
    在多平台构建场景下，结果会按平台置于子目录。

    属性键：

    - `dest` - destination directory where files will be written

    For more information, see
    [Local and tar exporters](/build/exporters/local-tar/).

    #### `tar`

    `tar` 将所有结果文件打包为一个 tarball。
    在多平台构建场景下，结果会按平台置于子目录。

    属性键：

    - `dest` - destination path where tarball will be written. “-” writes to stdout.

    For more information, see
    [Local and tar exporters](/build/exporters/local-tar/).

    #### `oci`

    `oci` 将结果镜像或清单列表以 [OCI image layout](https://github.com/opencontainers/image-spec/blob/v1.0.1/image-layout.md)
    tarball 的形式导出。

    属性键：

    - `dest` - destination path where tarball will be written. “-” writes to stdout.

    For more information, see
    [OCI and Docker exporters](/build/exporters/oci-docker/).

    #### `docker`

    `docker` 将单平台结果镜像导出为 [Docker image specification](https://github.com/docker/docker/blob/v20.10.2/image/spec/v1.2.md)
    tarball；该 tarball 也兼容 OCI。

    Docker Engine 默认镜像存储不支持直接加载多平台镜像。
    你可以启用 containerd 镜像存储，或直接推送到镜像仓库，参见 [`registry`](#registry)。

    属性键：

    - `dest` - destination path where tarball will be written. If not specified,
      the tar will be loaded automatically to the local image store.
    - `context` - name for the Docker context where to import the result

    For more information, see
    [OCI and Docker exporters](/build/exporters/oci-docker/).

    #### `image`

    `image` 将构建结果写为镜像或清单列表。在 `docker` 驱动下，镜像会出现在 `docker images` 中。
    也可通过属性配置实现自动推送到镜像仓库。

    属性键：

    - `name` - name (references) for the new image.
    - `push` - Boolean to automatically push the image.

    For more information, see
    [Image and registry exporters](/build/exporters/image-registry/).

    #### `registry`

    `registry` 导出器等价于 `type=image,push=true`。

    For more information, see
    [Image and registry exporters](/build/exporters/image-registry/).

    ### 设置构建的目标平台（--platform）{#platform}

    ```text
    --platform=value[,value]
    ```

    设置构建的目标平台。Dockerfile 中未显式指定 `--platform` 的所有 `FROM` 指令，
    都会按该平台拉取基础镜像；最终产物也将使用该平台。

    默认值为执行构建的 BuildKit 守护进程的平台。
    取值格式为 `os/arch` 或 `os/arch/variant`，例如 `linux/amd64`、`linux/arm/v7`。
    此外还支持特殊值 `local`，表示使用发起构建的 BuildKit 客户端的平台。

    在 `docker-container` 驱动下，该标志可接收多个以逗号分隔的平台值，
    将为所有指定平台进行构建，并合并为单一清单列表（manifest list）。

    如果 `Dockerfile` 需要执行 `RUN`，构建器必须具备目标平台的运行时支持。
    在默认环境中通常只能为当前系统架构执行 `RUN`。
    如果内核启用了面向其他架构的 [`binfmt_misc`](https://en.wikipedia.org/wiki/Binfmt_misc) 启动器，
    buildx 会自动使用它们。
    Docker Desktop 默认为 `arm64` 与 `arm` 配置了 `binfmt_misc`。
    运行 `docker buildx inspect --bootstrap` 可查看当前构建器支持的平台。

    在 `Dockerfile` 中，可通过构建参数 `TARGETPLATFORM` 访问当前平台值。
    详见 [Dockerfile 参考](/reference/dockerfile/#automatic-platform-args-in-the-global-scope)。

    平台标识的格式定义可参考
    [containerd 源码](https://github.com/containerd/containerd/blob/v1.4.3/platforms/platforms.go#L63)。

    ```console
    $ docker buildx build --platform=linux/arm64 .
    $ docker buildx build --platform=linux/amd64,linux/arm64,linux/arm/v7 .
    $ docker buildx build --platform=darwin .
    ```

    ### 设置进度输出类型（--progress）{#progress}

    ```text
    --progress=VALUE
    ```

    设置进度输出的类型。可选值：
    - `auto`（默认）：若客户端是 TTY 则使用 `tty`，否则使用 `plain`
    - `tty`：彩色并可重绘的交互式输出流
    - `plain`：以纯文本展示原始构建进度
    - `quiet`：压制构建输出，成功时仅打印镜像 ID（等同 `--quiet`）
    - `rawjson`：以 JSON 行输出原始构建进度

    > [!NOTE]
    > 也可以通过环境变量 `BUILDKIT_PROGRESS` 设置该值。

    下例展示在构建时启用 `plain` 输出：

    ```console
    $ docker buildx build --load --progress=plain .

    #1 [internal] load build definition from Dockerfile
    #1 transferring dockerfile: 227B 0.0s done
    #1 DONE 0.1s

    #2 [internal] load .dockerignore
    #2 transferring context: 129B 0.0s done
    #2 DONE 0.0s
    ...
    ```

    > [!NOTE]
    > 还可通过环境变量 [`BUILDKIT_COLORS`](/build/building/variables/#buildkit_colors)
    > 修改终端输出颜色。

    `rawjson` 会将 BuildKit 的求解状态事件序列化为 JSON 行，主要供外部程序读取。

    ### 创建来源证明（--provenance）{#provenance}

    等同于 [`--attest=type=provenance`](#attest)，用于为构建结果配置来源证明。
    例如，`--provenance=mode=max` 等价于 `--attest=type=provenance,mode=max`。

    此外，`--provenance` 也可接收布尔值以启用或禁用来源证明：
    `--provenance=false` 禁用所有来源证明，`--provenance=true` 则全部启用。

    默认会为构建结果创建最小化的来源证明。
    注意：Docker Engine 默认镜像存储不支持证明；在使用默认存储时，只有直接推送到仓库的镜像才会保留证明。
    或者你可以改用 containerd 镜像存储。

    了解更多来源证明，见[此处](/build/metadata/attestations/slsa-provenance/)。

    ### 将构建结果推送到仓库（--push）{#push}

    等同于 [`--output=type=registry`](#registry)。会自动将构建结果推送到仓库。

    ### 创建 SBOM 证明（--sbom）{#sbom}

    等同于 [`--attest=type=sbom`](#attest)，用于为构建结果配置 SBOM 证明。
    例如，`--sbom=generator=<user>/<generator-image>` 等价于
    `--attest=type=sbom,generator=<user>/<generator-image>`。

    此外，`--sbom` 也可接收布尔值以启用或禁用 SBOM 证明，例如 `--sbom=false`。

    注意：Docker Engine 默认镜像存储不支持证明；使用默认存储时，只有直接推送到仓库的镜像才会保留证明。
    或者改用 containerd 镜像存储。

    For more information, see [here](/build/metadata/attestations/sbom/).

    ### 向构建暴露的机密（--secret）{#secret}

    ```text
    --secret=[type=TYPE[,KEY=VALUE]
    ```

    向构建暴露机密（认证凭据、令牌等）。
    可在 [Dockerfile](/reference/dockerfile/#run---mounttypesecret) 中通过 `RUN --mount=type=secret`
    挂载机密。更多用法见[构建机密](/build/building/secrets/)。

    Supported types are:

    - [`type=file`](#typefile)
    - [`type=env`](#typeenv)

    未显式设置 `type` 时，Buildx 会尝试自动识别：若存在与 `id` 同名的环境变量，则使用 `type=env` 并取其值；
    否则回退到 `type=file`。

    #### `type=file`

    从文件读取构建机密。

    ##### `type=file` synopsis

    ```console
    $ docker buildx build --secret [type=file,]id=<ID>[,src=<FILEPATH>] .
    ```

    ##### `type=file` attributes

    | Key             | Description                                                                                           | Default                    |
    | --------------- | ----------------------------------------------------------------------------------------------------- | -------------------------- |
    | `id`            | ID of the secret.                                                                                     | N/A (this key is required) |
    | `src`, `source` | Filepath of the file containing the secret value (absolute or relative to current working directory). | `id` if unset.             |

    ###### `type=file` usage

    下例中由于未设置名为 `aws` 的环境变量，因此自动识别为 `type=file`：

    ```console
    $ docker buildx build --secret id=aws,src=$HOME/.aws/credentials .
    ```

    ```dockerfile
    # syntax=docker/dockerfile:1
    FROM python:3
    RUN pip install awscli
    RUN --mount=type=secret,id=aws,target=/root/.aws/credentials \
      aws s3 cp s3://... ...
    ```

    #### `type=env`

    从环境变量读取构建机密。

    ##### `type=env` synopsis

    ```console
    $ docker buildx build --secret [type=env,]id=<ID>[,env=<VARIABLE>] .
    ```

    ##### `type=env` attributes

    | Key                    | Description                                     | Default                    |
    | ---------------------- | ----------------------------------------------- | -------------------------- |
    | `id`                   | ID of the secret.                               | N/A (this key is required) |
    | `env`, `src`, `source` | Environment variable to source the secret from. | `id` if unset.             |

    ##### `type=env` usage

    下例中由于设置了与 `id` 同名的环境变量，因此自动识别为 `type=env`：

    ```console
    $ SECRET_TOKEN=token docker buildx build --secret id=SECRET_TOKEN .
    ```

    ```dockerfile
    # syntax=docker/dockerfile:1
    FROM node:alpine
    RUN --mount=type=bind,target=. \
      --mount=type=secret,id=SECRET_TOKEN,env=SECRET_TOKEN \
      yarn run test
    ```

    下例将环境变量 `API_KEY` 的值注入到构建参数 `SECRET_TOKEN`：

    ```console
    $ API_KEY=token docker buildx build --secret id=SECRET_TOKEN,env=API_KEY .
    ```

    也可以通过 `src` 或 `source` 指定环境变量名：

    ```console
    $ API_KEY=token docker buildx build --secret type=env,id=SECRET_TOKEN,src=API_KEY .
    ```

    > [!NOTE]
    > 当通过 `src` 或 `source` 指定环境变量名时，必须显式设置 `type=env`。
    > 否则 Buildx 会认为机密是 `type=file`，并尝试读取同名文件（此处为 `API_KEY`）。

    ### 构建容器的共享内存大小（--shm-size）{#shm-size}

    设置在执行 `RUN` 指令时，构建容器可用的共享内存大小。

    格式为 `<number><unit>`：`number` 必须大于 `0`；`unit` 可选，取值为 `b`（字节）、`k`（KB）、
    `m`（MB）、`g`（GB）。若省略单位则按字节计算。

    > [!NOTE]
    > 通常建议由构建器自动确定合适配置；
    > 仅在复杂构建需要特定性能调优时再考虑手动调整。

    ### 向构建暴露 SSH 代理套接字或密钥（--ssh）{#ssh}

    ```text
    --ssh=default|<id>[=<socket>|<key>[,<key>]]
    ```

    当 Dockerfile 中的某些命令需要特定 SSH 认证（例如克隆私有仓库）时，这将很有用。

    `--ssh` 会将 SSH 代理套接字或密钥暴露给构建，可配合
    [`RUN --mount=type=ssh`](/reference/dockerfile/#run---mounttypessh) 使用。

    通过 SSH agent socket 访问 GitLab 的示例：

    ```dockerfile
    # syntax=docker/dockerfile:1
    FROM alpine
    RUN apk add --no-cache openssh-client
    RUN mkdir -p -m 0700 ~/.ssh && ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    RUN --mount=type=ssh ssh -q -T git@gitlab.com 2>&1 | tee /hello
    # "Welcome to GitLab, @GITLAB_USERNAME_ASSOCIATED_WITH_SSHKEY" should be printed here
    # with the type of build progress is defined as `plain`.
    ```

    ```console
    $ eval $(ssh-agent)
    $ ssh-add ~/.ssh/id_rsa
    (此处输入你的密钥口令)
    $ docker buildx build --ssh default=$SSH_AUTH_SOCK .
    ```

    ### 为镜像打标签（-t, --tag）{#tag}

    ```console
    $ docker buildx build -t docker/apache:2.0 .
    ```

    这与前一个示例的构建方式相同，但随后会为生成的镜像打标签。
    仓库名为 `docker/apache`，标签为 `2.0`。

    [Read more about valid tags](/reference/cli/docker/image/tag/).

    你可以为镜像添加多个标签。例如，给新构建镜像打上 `latest`，同时再加一个指向特定版本的标签。

    例如，同时打上 `docker/fedora-jboss:latest` 与 `docker/fedora-jboss:v2.1`：

    ```console
    $ docker buildx build -t docker/fedora-jboss:latest -t docker/fedora-jboss:v2.1 .
    ```

    ### 指定目标构建阶段（--target）{#target}

    针对包含多个构建阶段的 Dockerfile，可用 `--target` 按名称指定某个中间阶段作为最终产物阶段；
    构建器会跳过该阶段之后的指令。

    ```dockerfile
    FROM debian AS build-env
    # ...

    FROM alpine AS production-env
    # ...
    ```

    ```console
    $ docker buildx build -t mybuildimage --target build-env .
    ```

    ### 设置 ulimit（--ulimit）{#ulimit}

    `--ulimit` 用于在执行 `RUN` 指令时覆盖构建容器的默认 ulimit，
    以 `<type>=<soft limit>[:<hard limit>]` 的形式指定，例如：

    ```console
    $ docker buildx build --ulimit nofile=1024:1024 .
    ```

    > [!NOTE]
    > 若未提供 `hard limit`，则使用 `soft limit` 作为软/硬限制。
    > 未显式设置时，将继承守护进程的默认 `ulimits`。

    > [!NOTE]
    > 通常建议由构建器自动确定合适配置；
    > 仅在复杂构建需要特定性能调优时再考虑手动调整。
deprecated: false
hidden: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

